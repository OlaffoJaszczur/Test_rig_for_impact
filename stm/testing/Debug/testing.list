
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004368  08004368  00005368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a0  080043a0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080043a0  080043a0  000053a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a8  080043a8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a8  080043a8  000053a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080043bc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080043bc  0000617c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d65d  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f04  00000000  00000000  00013692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00015598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a88  00000000  00000000  00016300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4a8  00000000  00000000  00016d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f134  00000000  00000000  00035230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4b7e  00000000  00000000  00044364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003894  00000000  00000000  000f8f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000fc7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004350 	.word	0x08004350

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004350 	.word	0x08004350

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fce1 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f825 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa61 	bl	80009e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000522:	f000 f88b 	bl	800063c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000526:	f000 f8c7 	bl	80006b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800052a:	f000 f943 	bl	80007b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052e:	f000 f9b7 	bl	80008a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000532:	f000 fa2d 	bl	8000990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  char message[] = "Hello World!\r\n"
//  HAL_irq_enable();
  uint8_t errorMessage = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(NENABLE_GPIO_Port, NENABLE_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <main+0x50>)
 8000542:	f001 fb13 	bl	8001b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800054c:	4804      	ldr	r0, [pc, #16]	@ (8000560 <main+0x50>)
 800054e:	f001 fb0d 	bl	8001b6c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000552:	2108      	movs	r1, #8
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <main+0x54>)
 8000556:	f002 fa41 	bl	80029dc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055a:	bf00      	nop
 800055c:	e7fd      	b.n	800055a <main+0x4a>
 800055e:	bf00      	nop
 8000560:	40011000 	.word	0x40011000
 8000564:	200000e8 	.word	0x200000e8

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09c      	sub	sp, #112	@ 0x70
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000572:	2238      	movs	r2, #56	@ 0x38
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 febe 	bl	80042f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2220      	movs	r2, #32
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 feb0 	bl	80042f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80005a2:	2304      	movs	r3, #4
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80005aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL10;
 80005c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV4;
 80005ca:	2330      	movs	r3, #48	@ 0x30
 80005cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fae2 	bl	8001b9c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005de:	f000 fa65 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fde2 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060a:	f000 fa4f 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800060e:	2302      	movs	r3, #2
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000616:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f804 	bl	8002628 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 fa41 	bl	8000aac <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800062a:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <SystemClock_Config+0xd0>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	3770      	adds	r7, #112	@ 0x70
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	42420070 	.word	0x42420070

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_ADC1_Init+0x74>)
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <MX_ADC1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_ADC1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_ADC1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_ADC1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_ADC1_Init+0x74>)
 8000666:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_ADC1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_ADC1_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <MX_ADC1_Init+0x74>)
 800067a:	f000 fc91 	bl	8000fa0 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fa12 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068c:	2301      	movs	r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_ADC1_Init+0x74>)
 800069a:	f000 fd59 	bl	8001150 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006a4:	f000 fa02 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40012400 	.word	0x40012400

080006b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e2:	4b32      	ldr	r3, [pc, #200]	@ (80007ac <MX_TIM1_Init+0xf4>)
 80006e4:	4a32      	ldr	r2, [pc, #200]	@ (80007b0 <MX_TIM1_Init+0xf8>)
 80006e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006e8:	4b30      	ldr	r3, [pc, #192]	@ (80007ac <MX_TIM1_Init+0xf4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b2f      	ldr	r3, [pc, #188]	@ (80007ac <MX_TIM1_Init+0xf4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006f4:	4b2d      	ldr	r3, [pc, #180]	@ (80007ac <MX_TIM1_Init+0xf4>)
 80006f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b2b      	ldr	r3, [pc, #172]	@ (80007ac <MX_TIM1_Init+0xf4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000702:	4b2a      	ldr	r3, [pc, #168]	@ (80007ac <MX_TIM1_Init+0xf4>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <MX_TIM1_Init+0xf4>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800070e:	4827      	ldr	r0, [pc, #156]	@ (80007ac <MX_TIM1_Init+0xf4>)
 8000710:	f002 f8bc 	bl	800288c <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800071a:	f000 f9c7 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	4619      	mov	r1, r3
 800072a:	4820      	ldr	r0, [pc, #128]	@ (80007ac <MX_TIM1_Init+0xf4>)
 800072c:	f002 fbb6 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000736:	f000 f9b9 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800073a:	481c      	ldr	r0, [pc, #112]	@ (80007ac <MX_TIM1_Init+0xf4>)
 800073c:	f002 f9f8 	bl	8002b30 <HAL_TIM_IC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000746:	f000 f9b1 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4814      	ldr	r0, [pc, #80]	@ (80007ac <MX_TIM1_Init+0xf4>)
 800075a:	f003 f835 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000764:	f000 f9a2 	bl	8000aac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800076c:	2301      	movs	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	2204      	movs	r2, #4
 800077c:	4619      	mov	r1, r3
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <MX_TIM1_Init+0xf4>)
 8000780:	f002 fa2e 	bl	8002be0 <HAL_TIM_IC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800078a:	f000 f98f 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2208      	movs	r2, #8
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_TIM1_Init+0xf4>)
 8000796:	f002 fa23 	bl	8002be0 <HAL_TIM_IC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007a0:	f000 f984 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	@ 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000058 	.word	0x20000058
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	@ 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007f8:	4b28      	ldr	r3, [pc, #160]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b26      	ldr	r3, [pc, #152]	@ (800089c <MX_TIM2_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_TIM2_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	4823      	ldr	r0, [pc, #140]	@ (800089c <MX_TIM2_Init+0xe8>)
 800080e:	f002 f83d 	bl	800288c <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000818:	f000 f948 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000826:	4619      	mov	r1, r3
 8000828:	481c      	ldr	r0, [pc, #112]	@ (800089c <MX_TIM2_Init+0xe8>)
 800082a:	f002 fb37 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000834:	f000 f93a 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000838:	4818      	ldr	r0, [pc, #96]	@ (800089c <MX_TIM2_Init+0xe8>)
 800083a:	f002 f876 	bl	800292a <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000844:	f000 f932 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4619      	mov	r1, r3
 8000856:	4811      	ldr	r0, [pc, #68]	@ (800089c <MX_TIM2_Init+0xe8>)
 8000858:	f002 ffb6 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000862:	f000 f923 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000866:	2360      	movs	r3, #96	@ 0x60
 8000868:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	@ (800089c <MX_TIM2_Init+0xe8>)
 800087e:	f002 fa4b 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 f910 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800088c:	4803      	ldr	r0, [pc, #12]	@ (800089c <MX_TIM2_Init+0xe8>)
 800088e:	f000 f9e7 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	@ 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000a0 	.word	0x200000a0

080008a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	@ 0x38
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008d2:	4a2e      	ldr	r2, [pc, #184]	@ (800098c <MX_TIM3_Init+0xec>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008d8:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80008dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f8:	4823      	ldr	r0, [pc, #140]	@ (8000988 <MX_TIM3_Init+0xe8>)
 80008fa:	f001 ffc7 	bl	800288c <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000904:	f000 f8d2 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000912:	4619      	mov	r1, r3
 8000914:	481c      	ldr	r0, [pc, #112]	@ (8000988 <MX_TIM3_Init+0xe8>)
 8000916:	f002 fac1 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 f8c4 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000924:	4818      	ldr	r0, [pc, #96]	@ (8000988 <MX_TIM3_Init+0xe8>)
 8000926:	f002 f800 	bl	800292a <HAL_TIM_PWM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000930:	f000 f8bc 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	@ (8000988 <MX_TIM3_Init+0xe8>)
 8000944:	f002 ff40 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800094e:	f000 f8ad 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	2360      	movs	r3, #96	@ 0x60
 8000954:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000956:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800095a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2208      	movs	r2, #8
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	@ (8000988 <MX_TIM3_Init+0xe8>)
 800096c:	f002 f9d4 	bl	8002d18 <HAL_TIM_PWM_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000976:	f000 f899 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800097a:	4803      	ldr	r0, [pc, #12]	@ (8000988 <MX_TIM3_Init+0xe8>)
 800097c:	f000 f970 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000980:	bf00      	nop
 8000982:	3738      	adds	r7, #56	@ 0x38
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000e8 	.word	0x200000e8
 800098c:	40000400 	.word	0x40000400

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f002 ff64 	bl	8003894 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f86b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000130 	.word	0x20000130
 80009e0:	40013800 	.word	0x40013800

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a29      	ldr	r2, [pc, #164]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a16:	f043 0320 	orr.w	r3, r3, #32
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0320 	and.w	r3, r3, #32
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0xc0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAGNET_Pin|DIR_Pin|NENABLE_Pin|NSLEEP_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6164 	mov.w	r1, #3648	@ 0xe40
 8000a5e:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a60:	f001 f884 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NHOME_Pin LIMIT_SW_Pin NFAULT_Pin */
  GPIO_InitStruct.Pin = NHOME_Pin|LIMIT_SW_Pin|NFAULT_Pin;
 8000a64:	f44f 5342 	mov.w	r3, #12416	@ 0x3080
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a7a:	f000 fef3 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAGNET_Pin DIR_Pin NENABLE_Pin NSLEEP_Pin */
  GPIO_InitStruct.Pin = MAGNET_Pin|DIR_Pin|NENABLE_Pin|NSLEEP_Pin;
 8000a7e:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0xc4>)
 8000a98:	f000 fee4 	bl	8001864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40011000 	.word	0x40011000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_MspInit+0x60>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_MspInit+0x60>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <HAL_ADC_MspInit+0x6c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d121      	bne.n	8000b80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	@ (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_ADC_MspInit+0x74>)
 8000b7c:	f000 fe72 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40012400 	.word	0x40012400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010800 	.word	0x40010800

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a28      	ldr	r2, [pc, #160]	@ (8000c50 <HAL_TIM_Base_MspInit+0xbc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d125      	bne.n	8000c00 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb4:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a26      	ldr	r2, [pc, #152]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000bba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a20      	ldr	r2, [pc, #128]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PHOTOCELL_1_Pin|PHOTOCELL_2_Pin;
 8000be4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0318 	add.w	r3, r7, #24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <HAL_TIM_Base_MspInit+0xc4>)
 8000bfa:	f000 fe33 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bfe:	e022      	b.n	8000c46 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c08:	d10c      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	e010      	b.n	8000c46 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <HAL_TIM_Base_MspInit+0xc8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10b      	bne.n	8000c46 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_TIM_Base_MspInit+0xc0>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012c00 	.word	0x40012c00
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40000400 	.word	0x40000400

08000c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c7e:	d12b      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b2f      	ldr	r3, [pc, #188]	@ (8000d40 <HAL_TIM_MspPostInit+0xe0>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a2e      	ldr	r2, [pc, #184]	@ (8000d40 <HAL_TIM_MspPostInit+0xe0>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <HAL_TIM_MspPostInit+0xe0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PHOTOCELL_38K_Pin;
 8000c98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PHOTOCELL_38K_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	4825      	ldr	r0, [pc, #148]	@ (8000d44 <HAL_TIM_MspPostInit+0xe4>)
 8000cae:	f000 fdd9 	bl	8001864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <HAL_TIM_MspPostInit+0xe8>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	623b      	str	r3, [r7, #32]
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000cbe:	623b      	str	r3, [r7, #32]
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cce:	623b      	str	r3, [r7, #32]
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_TIM_MspPostInit+0xe8>)
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cd6:	e02f      	b.n	8000d38 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_TIM_MspPostInit+0xec>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12a      	bne.n	8000d38 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <HAL_TIM_MspPostInit+0xe0>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <HAL_TIM_MspPostInit+0xe0>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_TIM_MspPostInit+0xe0>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_Pin;
 8000cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <HAL_TIM_MspPostInit+0xf0>)
 8000d10:	f000 fda8 	bl	8001864 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_TIM_MspPostInit+0xe8>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <HAL_TIM_MspPostInit+0xe8>)
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	6053      	str	r3, [r2, #4]
}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	@ 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	40011000 	.word	0x40011000

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a26      	ldr	r2, [pc, #152]	@ (8000e08 <HAL_UART_MspInit+0xb4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d145      	bne.n	8000e00 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d74:	4b25      	ldr	r3, [pc, #148]	@ (8000e0c <HAL_UART_MspInit+0xb8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a24      	ldr	r2, [pc, #144]	@ (8000e0c <HAL_UART_MspInit+0xb8>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <HAL_UART_MspInit+0xb8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_UART_MspInit+0xb8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <HAL_UART_MspInit+0xb8>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_UART_MspInit+0xb8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000da4:	2340      	movs	r3, #64	@ 0x40
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <HAL_UART_MspInit+0xbc>)
 8000db8:	f000 fd54 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4810      	ldr	r0, [pc, #64]	@ (8000e10 <HAL_UART_MspInit+0xbc>)
 8000dd0:	f000 fd48 	bl	8001864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_UART_MspInit+0xc0>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_UART_MspInit+0xc0>)
 8000dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dee:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2025      	movs	r0, #37	@ 0x25
 8000df6:	f000 fbbc 	bl	8001572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dfa:	2025      	movs	r0, #37	@ 0x25
 8000dfc:	f000 fbd5 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	@ 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40010000 	.word	0x40010000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f87e 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <USART1_IRQHandler+0x10>)
 8000e76:	f002 fd5d 	bl	8003934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000130 	.word	0x20000130

08000e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff fff8 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e96:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a09      	ldr	r2, [pc, #36]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eac:	4c09      	ldr	r4, [pc, #36]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eba:	f003 fa25 	bl	8004308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fb27 	bl	8000510 <main>
  bx lr
 8000ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ecc:	080043b0 	.word	0x080043b0
  ldr r2, =_sbss
 8000ed0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed4:	2000017c 	.word	0x2000017c

08000ed8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_Init+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_Init+0x28>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 fb35 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fdde 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb4d 	bl	80015c6 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f44:	f000 fb15 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a03      	ldr	r2, [pc, #12]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000178 	.word	0x20000178

08000f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	@ (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000178 	.word	0x20000178

08000fa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0be      	b.n	8001140 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d109      	bne.n	8000fe4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fd9c 	bl	8000b1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f9ab 	bl	8001340 <ADC_ConversionStop_Disable>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 8099 	bne.w	800112e <HAL_ADC_Init+0x18e>
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 8095 	bne.w	800112e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001008:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800100c:	f023 0302 	bic.w	r3, r3, #2
 8001010:	f043 0202 	orr.w	r2, r3, #2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001020:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7b1b      	ldrb	r3, [r3, #12]
 8001026:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001028:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4313      	orrs	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001038:	d003      	beq.n	8001042 <HAL_ADC_Init+0xa2>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <HAL_ADC_Init+0xa8>
 8001042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001046:	e000      	b.n	800104a <HAL_ADC_Init+0xaa>
 8001048:	2300      	movs	r3, #0
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7d1b      	ldrb	r3, [r3, #20]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d119      	bne.n	800108c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7b1b      	ldrb	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d109      	bne.n	8001074 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	3b01      	subs	r3, #1
 8001066:	035a      	lsls	r2, r3, #13
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	e00b      	b.n	800108c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001078:	f043 0220 	orr.w	r2, r3, #32
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	f043 0201 	orr.w	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	430a      	orrs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <HAL_ADC_Init+0x1a8>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010bc:	d003      	beq.n	80010c6 <HAL_ADC_Init+0x126>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d104      	bne.n	80010d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	051b      	lsls	r3, r3, #20
 80010ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_ADC_Init+0x1ac>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d10b      	bne.n	800110c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fe:	f023 0303 	bic.w	r3, r3, #3
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800110a:	e018      	b.n	800113e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001110:	f023 0312 	bic.w	r3, r3, #18
 8001114:	f043 0210 	orr.w	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112c:	e007      	b.n	800113e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	ffe1f7fd 	.word	0xffe1f7fd
 800114c:	ff1f0efe 	.word	0xff1f0efe

08001150 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x20>
 800116c:	2302      	movs	r3, #2
 800116e:	e0dc      	b.n	800132a <HAL_ADC_ConfigChannel+0x1da>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b06      	cmp	r3, #6
 800117e:	d81c      	bhi.n	80011ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3b05      	subs	r3, #5
 8001192:	221f      	movs	r2, #31
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4019      	ands	r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b05      	subs	r3, #5
 80011ac:	fa00 f203 	lsl.w	r2, r0, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b8:	e03c      	b.n	8001234 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d81c      	bhi.n	80011fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3b23      	subs	r3, #35	@ 0x23
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	4019      	ands	r1, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	@ 0x23
 80011ee:	fa00 f203 	lsl.w	r2, r0, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011fa:	e01b      	b.n	8001234 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b41      	subs	r3, #65	@ 0x41
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	4019      	ands	r1, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b41      	subs	r3, #65	@ 0x41
 8001228:	fa00 f203 	lsl.w	r2, r0, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b09      	cmp	r3, #9
 800123a:	d91c      	bls.n	8001276 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68d9      	ldr	r1, [r3, #12]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	2207      	movs	r2, #7
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	4019      	ands	r1, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6898      	ldr	r0, [r3, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	3b1e      	subs	r3, #30
 8001268:	fa00 f203 	lsl.w	r2, r0, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	e019      	b.n	80012aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6919      	ldr	r1, [r3, #16]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	2207      	movs	r2, #7
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	4019      	ands	r1, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	6898      	ldr	r0, [r3, #8]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	fa00 f203 	lsl.w	r2, r0, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d003      	beq.n	80012ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012b6:	2b11      	cmp	r3, #17
 80012b8:	d132      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_ADC_ConfigChannel+0x1e4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d125      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d126      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80012e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d11a      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_ADC_ConfigChannel+0x1e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <HAL_ADC_ConfigChannel+0x1ec>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	0c9a      	lsrs	r2, r3, #18
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001300:	e002      	b.n	8001308 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f9      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x1b2>
 800130e:	e007      	b.n	8001320 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40012400 	.word	0x40012400
 8001338:	20000000 	.word	0x20000000
 800133c:	431bde83 	.word	0x431bde83

08001340 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d12e      	bne.n	80013b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800136a:	f7ff fe0f 	bl	8000f8c <HAL_GetTick>
 800136e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001370:	e01b      	b.n	80013aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001372:	f7ff fe0b 	bl	8000f8c <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d914      	bls.n	80013aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10d      	bne.n	80013aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001392:	f043 0210 	orr.w	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e007      	b.n	80013ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d0dc      	beq.n	8001372 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4906      	ldr	r1, [pc, #24]	@ (800145c <__NVIC_EnableIRQ+0x34>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	@ (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	@ 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800153c:	f7ff ff90 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff2d 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff42 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff90 	bl	80014b4 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff35 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa2 	bl	8001518 <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d008      	beq.n	8001608 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2204      	movs	r2, #4
 80015fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e020      	b.n	800164a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 020e 	bic.w	r2, r2, #14
 8001616:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d005      	beq.n	8001678 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e0d6      	b.n	8001826 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020e 	bic.w	r2, r2, #14
 8001686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b64      	ldr	r3, [pc, #400]	@ (8001830 <HAL_DMA_Abort_IT+0x1dc>)
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d958      	bls.n	8001756 <HAL_DMA_Abort_IT+0x102>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a62      	ldr	r2, [pc, #392]	@ (8001834 <HAL_DMA_Abort_IT+0x1e0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d04f      	beq.n	800174e <HAL_DMA_Abort_IT+0xfa>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a61      	ldr	r2, [pc, #388]	@ (8001838 <HAL_DMA_Abort_IT+0x1e4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d048      	beq.n	800174a <HAL_DMA_Abort_IT+0xf6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a5f      	ldr	r2, [pc, #380]	@ (800183c <HAL_DMA_Abort_IT+0x1e8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d040      	beq.n	8001744 <HAL_DMA_Abort_IT+0xf0>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001840 <HAL_DMA_Abort_IT+0x1ec>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d038      	beq.n	800173e <HAL_DMA_Abort_IT+0xea>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001844 <HAL_DMA_Abort_IT+0x1f0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d030      	beq.n	8001738 <HAL_DMA_Abort_IT+0xe4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5b      	ldr	r2, [pc, #364]	@ (8001848 <HAL_DMA_Abort_IT+0x1f4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d028      	beq.n	8001732 <HAL_DMA_Abort_IT+0xde>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a52      	ldr	r2, [pc, #328]	@ (8001830 <HAL_DMA_Abort_IT+0x1dc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d020      	beq.n	800172c <HAL_DMA_Abort_IT+0xd8>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a57      	ldr	r2, [pc, #348]	@ (800184c <HAL_DMA_Abort_IT+0x1f8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d019      	beq.n	8001728 <HAL_DMA_Abort_IT+0xd4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a55      	ldr	r2, [pc, #340]	@ (8001850 <HAL_DMA_Abort_IT+0x1fc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d012      	beq.n	8001724 <HAL_DMA_Abort_IT+0xd0>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a54      	ldr	r2, [pc, #336]	@ (8001854 <HAL_DMA_Abort_IT+0x200>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00a      	beq.n	800171e <HAL_DMA_Abort_IT+0xca>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a52      	ldr	r2, [pc, #328]	@ (8001858 <HAL_DMA_Abort_IT+0x204>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d102      	bne.n	8001718 <HAL_DMA_Abort_IT+0xc4>
 8001712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001716:	e01b      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 8001718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171c:	e018      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	e015      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 8001724:	2310      	movs	r3, #16
 8001726:	e013      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 8001728:	2301      	movs	r3, #1
 800172a:	e011      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 800172c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001730:	e00e      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 8001732:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001736:	e00b      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 8001738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173c:	e008      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 800173e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001742:	e005      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	e002      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 800174a:	2310      	movs	r3, #16
 800174c:	e000      	b.n	8001750 <HAL_DMA_Abort_IT+0xfc>
 800174e:	2301      	movs	r3, #1
 8001750:	4a42      	ldr	r2, [pc, #264]	@ (800185c <HAL_DMA_Abort_IT+0x208>)
 8001752:	6053      	str	r3, [r2, #4]
 8001754:	e057      	b.n	8001806 <HAL_DMA_Abort_IT+0x1b2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a36      	ldr	r2, [pc, #216]	@ (8001834 <HAL_DMA_Abort_IT+0x1e0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04f      	beq.n	8001800 <HAL_DMA_Abort_IT+0x1ac>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_DMA_Abort_IT+0x1e4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d048      	beq.n	80017fc <HAL_DMA_Abort_IT+0x1a8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a33      	ldr	r2, [pc, #204]	@ (800183c <HAL_DMA_Abort_IT+0x1e8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d040      	beq.n	80017f6 <HAL_DMA_Abort_IT+0x1a2>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_DMA_Abort_IT+0x1ec>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d038      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x19c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <HAL_DMA_Abort_IT+0x1f0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d030      	beq.n	80017ea <HAL_DMA_Abort_IT+0x196>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2e      	ldr	r2, [pc, #184]	@ (8001848 <HAL_DMA_Abort_IT+0x1f4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d028      	beq.n	80017e4 <HAL_DMA_Abort_IT+0x190>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a26      	ldr	r2, [pc, #152]	@ (8001830 <HAL_DMA_Abort_IT+0x1dc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d020      	beq.n	80017de <HAL_DMA_Abort_IT+0x18a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	@ (800184c <HAL_DMA_Abort_IT+0x1f8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_DMA_Abort_IT+0x186>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a29      	ldr	r2, [pc, #164]	@ (8001850 <HAL_DMA_Abort_IT+0x1fc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d012      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x182>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_DMA_Abort_IT+0x200>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00a      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x17c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_DMA_Abort_IT+0x204>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d102      	bne.n	80017ca <HAL_DMA_Abort_IT+0x176>
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	e01b      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ce:	e018      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d4:	e015      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017d6:	2310      	movs	r3, #16
 80017d8:	e013      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017da:	2301      	movs	r3, #1
 80017dc:	e011      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e2:	e00e      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80017e8:	e00b      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ee:	e008      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f4:	e005      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fa:	e002      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 80017fc:	2310      	movs	r3, #16
 80017fe:	e000      	b.n	8001802 <HAL_DMA_Abort_IT+0x1ae>
 8001800:	2301      	movs	r3, #1
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_DMA_Abort_IT+0x20c>)
 8001804:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
    } 
  }
  return status;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020080 	.word	0x40020080
 8001834:	40020008 	.word	0x40020008
 8001838:	4002001c 	.word	0x4002001c
 800183c:	40020030 	.word	0x40020030
 8001840:	40020044 	.word	0x40020044
 8001844:	40020058 	.word	0x40020058
 8001848:	4002006c 	.word	0x4002006c
 800184c:	40020408 	.word	0x40020408
 8001850:	4002041c 	.word	0x4002041c
 8001854:	40020430 	.word	0x40020430
 8001858:	40020444 	.word	0x40020444
 800185c:	40020400 	.word	0x40020400
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	@ 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e169      	b.n	8001b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8158 	bne.w	8001b46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a9a      	ldr	r2, [pc, #616]	@ (8001b04 <HAL_GPIO_Init+0x2a0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018a0:	4a98      	ldr	r2, [pc, #608]	@ (8001b04 <HAL_GPIO_Init+0x2a0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d875      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018a6:	4a98      	ldr	r2, [pc, #608]	@ (8001b08 <HAL_GPIO_Init+0x2a4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d058      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018ac:	4a96      	ldr	r2, [pc, #600]	@ (8001b08 <HAL_GPIO_Init+0x2a4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d86f      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018b2:	4a96      	ldr	r2, [pc, #600]	@ (8001b0c <HAL_GPIO_Init+0x2a8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d052      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018b8:	4a94      	ldr	r2, [pc, #592]	@ (8001b0c <HAL_GPIO_Init+0x2a8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d869      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018be:	4a94      	ldr	r2, [pc, #592]	@ (8001b10 <HAL_GPIO_Init+0x2ac>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04c      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018c4:	4a92      	ldr	r2, [pc, #584]	@ (8001b10 <HAL_GPIO_Init+0x2ac>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d863      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018ca:	4a92      	ldr	r2, [pc, #584]	@ (8001b14 <HAL_GPIO_Init+0x2b0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d046      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018d0:	4a90      	ldr	r2, [pc, #576]	@ (8001b14 <HAL_GPIO_Init+0x2b0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d85d      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d82a      	bhi.n	8001930 <HAL_GPIO_Init+0xcc>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d859      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018de:	a201      	add	r2, pc, #4	@ (adr r2, 80018e4 <HAL_GPIO_Init+0x80>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	08001939 	.word	0x08001939
 80018ec:	0800194b 	.word	0x0800194b
 80018f0:	0800198d 	.word	0x0800198d
 80018f4:	08001993 	.word	0x08001993
 80018f8:	08001993 	.word	0x08001993
 80018fc:	08001993 	.word	0x08001993
 8001900:	08001993 	.word	0x08001993
 8001904:	08001993 	.word	0x08001993
 8001908:	08001993 	.word	0x08001993
 800190c:	08001993 	.word	0x08001993
 8001910:	08001993 	.word	0x08001993
 8001914:	08001993 	.word	0x08001993
 8001918:	08001993 	.word	0x08001993
 800191c:	08001993 	.word	0x08001993
 8001920:	08001993 	.word	0x08001993
 8001924:	08001993 	.word	0x08001993
 8001928:	08001941 	.word	0x08001941
 800192c:	08001955 	.word	0x08001955
 8001930:	4a79      	ldr	r2, [pc, #484]	@ (8001b18 <HAL_GPIO_Init+0x2b4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001936:	e02c      	b.n	8001992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e029      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e024      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	3308      	adds	r3, #8
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e01f      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	330c      	adds	r3, #12
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e01a      	b.n	8001994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001966:	2304      	movs	r3, #4
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e013      	b.n	8001994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	611a      	str	r2, [r3, #16]
          break;
 800197e:	e009      	b.n	8001994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001980:	2308      	movs	r3, #8
 8001982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	615a      	str	r2, [r3, #20]
          break;
 800198a:	e003      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x130>
          break;
 8001992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	@ 0xff
 8001998:	d801      	bhi.n	800199e <HAL_GPIO_Init+0x13a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_Init+0x13e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	@ 0xff
 80019a8:	d802      	bhi.n	80019b0 <HAL_GPIO_Init+0x14c>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x152>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b2:	3b08      	subs	r3, #8
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	210f      	movs	r1, #15
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	6a39      	ldr	r1, [r7, #32]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80b1 	beq.w	8001b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019fc:	4a48      	ldr	r2, [pc, #288]	@ (8001b20 <HAL_GPIO_Init+0x2bc>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a40      	ldr	r2, [pc, #256]	@ (8001b24 <HAL_GPIO_Init+0x2c0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_GPIO_Init+0x1ec>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b28 <HAL_GPIO_Init+0x2c4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00d      	beq.n	8001a4c <HAL_GPIO_Init+0x1e8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3e      	ldr	r2, [pc, #248]	@ (8001b2c <HAL_GPIO_Init+0x2c8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b30 <HAL_GPIO_Init+0x2cc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_GPIO_Init+0x1e0>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e006      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e004      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a50:	2300      	movs	r3, #0
 8001a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a54:	f002 0203 	and.w	r2, r2, #3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a62:	492f      	ldr	r1, [pc, #188]	@ (8001b20 <HAL_GPIO_Init+0x2bc>)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	492c      	ldr	r1, [pc, #176]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4928      	ldr	r1, [pc, #160]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa4:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4922      	ldr	r1, [pc, #136]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab2:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	491e      	ldr	r1, [pc, #120]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4918      	ldr	r1, [pc, #96]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4914      	ldr	r1, [pc, #80]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	490e      	ldr	r1, [pc, #56]	@ (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e021      	b.n	8001b46 <HAL_GPIO_Init+0x2e2>
 8001b02:	bf00      	nop
 8001b04:	10320000 	.word	0x10320000
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	10220000 	.word	0x10220000
 8001b10:	10210000 	.word	0x10210000
 8001b14:	10120000 	.word	0x10120000
 8001b18:	10110000 	.word	0x10110000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40011400 	.word	0x40011400
 8001b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4909      	ldr	r1, [pc, #36]	@ (8001b68 <HAL_GPIO_Init+0x304>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f47f ae8e 	bne.w	8001878 <HAL_GPIO_Init+0x14>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	372c      	adds	r7, #44	@ 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e304      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e2de      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f988 	bl	8000f8c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f984 	bl	8000f8c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e292      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f974 	bl	8000f8c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f970 	bl	8000f8c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e27e      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e252      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff f929 	bl	8000f8c <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f925 	bl	8000f8c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e233      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f908 	bl	8000f8c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff f904 	bl	8000f8c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e212      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f8e8 	bl	8000f8c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f8e4 	bl	8000f8c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1f2      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 fc04 	bl	80025ec <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff f8ce 	bl	8000f8c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff f8ca 	bl	8000f8c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1d8      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b9b      	ldr	r3, [pc, #620]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b94      	ldr	r3, [pc, #592]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b91      	ldr	r3, [pc, #580]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a90      	ldr	r2, [pc, #576]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b8e      	ldr	r3, [pc, #568]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002088 <HAL_RCC_OscConfig+0x4ec>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b88      	ldr	r3, [pc, #544]	@ (8002088 <HAL_RCC_OscConfig+0x4ec>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a87      	ldr	r2, [pc, #540]	@ (8002088 <HAL_RCC_OscConfig+0x4ec>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff f88b 	bl	8000f8c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff f887 	bl	8000f8c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	@ 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e195      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002088 <HAL_RCC_OscConfig+0x4ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b78      	ldr	r3, [pc, #480]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a77      	ldr	r2, [pc, #476]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a72      	ldr	r2, [pc, #456]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b70      	ldr	r3, [pc, #448]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a6f      	ldr	r2, [pc, #444]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a69      	ldr	r2, [pc, #420]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b67      	ldr	r3, [pc, #412]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a66      	ldr	r2, [pc, #408]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b64      	ldr	r3, [pc, #400]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a63      	ldr	r2, [pc, #396]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b61      	ldr	r3, [pc, #388]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a60      	ldr	r2, [pc, #384]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f83b 	bl	8000f8c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff f837 	bl	8000f8c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e143      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b54      	ldr	r3, [pc, #336]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff f825 	bl	8000f8c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff f821 	bl	8000f8c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e12d      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b49      	ldr	r3, [pc, #292]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b45      	ldr	r3, [pc, #276]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a44      	ldr	r2, [pc, #272]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 808c 	beq.w	800209c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001f84:	4b3f      	ldr	r3, [pc, #252]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f90:	d10e      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001f92:	4b3c      	ldr	r3, [pc, #240]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d108      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001f9e:	4b39      	ldr	r3, [pc, #228]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e103      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d14e      	bne.n	8002056 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001fb8:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0ef      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <HAL_RCC_OscConfig+0x4f0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7fe ffd5 	bl	8000f8c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001fe6:	f7fe ffd1 	bl	8000f8c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0df      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002004:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002010:	491c      	ldr	r1, [pc, #112]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002016:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4918      	ldr	r1, [pc, #96]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8002024:	4313      	orrs	r3, r2
 8002026:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002028:	4b18      	ldr	r3, [pc, #96]	@ (800208c <HAL_RCC_OscConfig+0x4f0>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe ffad 	bl	8000f8c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002036:	f7fe ffa9 	bl	8000f8c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	@ 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0b7      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002048:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x49a>
 8002054:	e022      	b.n	800209c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_RCC_OscConfig+0x4e8>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_RCC_OscConfig+0x4f0>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe ff90 	bl	8000f8c <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800206e:	e00f      	b.n	8002090 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002070:	f7fe ff8c 	bl	8000f8c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	@ 0x64
 800207c:	d908      	bls.n	8002090 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e09a      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002090:	4b4b      	ldr	r3, [pc, #300]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e9      	bne.n	8002070 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8088 	beq.w	80021b6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a6:	4b46      	ldr	r3, [pc, #280]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d068      	beq.n	8002184 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d14d      	bne.n	8002156 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b42      	ldr	r3, [pc, #264]	@ (80021c4 <HAL_RCC_OscConfig+0x628>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff64 	bl	8000f8c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe ff60 	bl	8000f8c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e06e      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	4b39      	ldr	r3, [pc, #228]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ee:	d10f      	bne.n	8002110 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80020f0:	4b33      	ldr	r3, [pc, #204]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 80020f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4931      	ldr	r1, [pc, #196]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fe:	4b30      	ldr	r3, [pc, #192]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	f023 020f 	bic.w	r2, r3, #15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	492d      	ldr	r1, [pc, #180]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 800210c:	4313      	orrs	r3, r2
 800210e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002110:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	430b      	orrs	r3, r1
 8002122:	4927      	ldr	r1, [pc, #156]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_RCC_OscConfig+0x628>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe ff2d 	bl	8000f8c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe ff29 	bl	8000f8c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e037      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x59a>
 8002154:	e02f      	b.n	80021b6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x628>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe ff16 	bl	8000f8c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe ff12 	bl	8000f8c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e020      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c8>
 8002182:	e018      	b.n	80021b6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e013      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_RCC_OscConfig+0x624>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	42420060 	.word	0x42420060

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d0      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b67      	ldr	r3, [pc, #412]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4965      	ldr	r1, [pc, #404]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800222e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d040      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b41      	ldr	r3, [pc, #260]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e073      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b39      	ldr	r3, [pc, #228]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4936      	ldr	r1, [pc, #216]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fe68 	bl	8000f8c <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe fe64 	bl	8000f8c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e053      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d210      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4922      	ldr	r1, [pc, #136]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f821 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	@ (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	@ (8002394 <HAL_RCC_ClockConfig+0x1cc>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fdc6 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	08004368 	.word	0x08004368
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a0:	b092      	sub	sp, #72	@ 0x48
 80023a2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a8:	2300      	movs	r3, #0
 80023aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023ac:	2300      	movs	r3, #0
 80023ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b0:	2300      	movs	r3, #0
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d002      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d003      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x40>
 80023d4:	e0c3      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d6:	4b67      	ldr	r3, [pc, #412]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80023d8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80023da:	e0c3      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023de:	0c9b      	lsrs	r3, r3, #18
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80023e6:	5c9b      	ldrb	r3, [r3, r2]
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80ac 	beq.w	800254e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80023f6:	4b5e      	ldr	r3, [pc, #376]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	f003 020f 	and.w	r2, r3, #15
 80023fe:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002404:	4b5a      	ldr	r3, [pc, #360]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 808c 	beq.w	800252a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002412:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	3301      	adds	r3, #1
 800241e:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3302      	adds	r3, #2
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002430:	2200      	movs	r2, #0
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	627a      	str	r2, [r7, #36]	@ 0x24
 8002436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	4618      	mov	r0, r3
 800243c:	4611      	mov	r1, r2
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	fb00 f203 	mul.w	r2, r0, r3
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	fb03 f301 	mul.w	r3, r3, r1
 800244a:	4413      	add	r3, r2
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	fba2 4500 	umull	r4, r5, r2, r0
 8002452:	442b      	add	r3, r5
 8002454:	461d      	mov	r5, r3
 8002456:	4622      	mov	r2, r4
 8002458:	462b      	mov	r3, r5
 800245a:	f04f 0000 	mov.w	r0, #0
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	0159      	lsls	r1, r3, #5
 8002464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002468:	0150      	lsls	r0, r2, #5
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	ebb2 0a04 	subs.w	sl, r2, r4
 8002472:	eb63 0b05 	sbc.w	fp, r3, r5
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002482:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002486:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800248a:	ebb2 080a 	subs.w	r8, r2, sl
 800248e:	eb63 090b 	sbc.w	r9, r3, fp
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a6:	4690      	mov	r8, r2
 80024a8:	4699      	mov	r9, r3
 80024aa:	eb18 0304 	adds.w	r3, r8, r4
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	eb49 0305 	adc.w	r3, r9, r5
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c2:	4629      	mov	r1, r5
 80024c4:	028b      	lsls	r3, r1, #10
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	4604      	mov	r4, r0
 80024cc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80024d0:	4601      	mov	r1, r0
 80024d2:	028a      	lsls	r2, r1, #10
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	2200      	movs	r2, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	617a      	str	r2, [r7, #20]
 80024e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e2:	2200      	movs	r2, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80024ec:	4622      	mov	r2, r4
 80024ee:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80024f2:	4645      	mov	r5, r8
 80024f4:	fb05 f202 	mul.w	r2, r5, r2
 80024f8:	46cc      	mov	ip, r9
 80024fa:	4625      	mov	r5, r4
 80024fc:	461c      	mov	r4, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	fb03 f30c 	mul.w	r3, r3, ip
 8002504:	4413      	add	r3, r2
 8002506:	4622      	mov	r2, r4
 8002508:	4644      	mov	r4, r8
 800250a:	fba2 2404 	umull	r2, r4, r2, r4
 800250e:	61fc      	str	r4, [r7, #28]
 8002510:	61ba      	str	r2, [r7, #24]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	f7fd fe82 	bl	8000224 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	647b      	str	r3, [r7, #68]	@ 0x44
 8002528:	e007      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252c:	4a11      	ldr	r2, [pc, #68]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800252e:	fb03 f202 	mul.w	r2, r3, r2
 8002532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800253a:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800253c:	7b5b      	ldrb	r3, [r3, #13]
 800253e:	461a      	mov	r2, r3
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8002546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	647b      	str	r3, [r7, #68]	@ 0x44
 800254c:	e004      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	4a0b      	ldr	r2, [pc, #44]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8002558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800255c:	e002      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8002560:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002562:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002566:	4618      	mov	r0, r3
 8002568:	3748      	adds	r7, #72	@ 0x48
 800256a:	46bd      	mov	sp, r7
 800256c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	00f42400 	.word	0x00f42400
 8002578:	08004380 	.word	0x08004380
 800257c:	08004390 	.word	0x08004390
 8002580:	003d0900 	.word	0x003d0900
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	@ (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	@ (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08004378 	.word	0x08004378

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffde 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0adb      	lsrs	r3, r3, #11
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	@ (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08004378 	.word	0x08004378

080025ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <RCC_Delay+0x34>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <RCC_Delay+0x38>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0a5b      	lsrs	r3, r3, #9
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002608:	bf00      	nop
  }
  while (Delay --);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	60fa      	str	r2, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <RCC_Delay+0x1c>
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000000 	.word	0x20000000
 8002624:	10624dd3 	.word	0x10624dd3

08002628 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d07d      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264c:	4b8b      	ldr	r3, [pc, #556]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4a87      	ldr	r2, [pc, #540]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002662:	61d3      	str	r3, [r2, #28]
 8002664:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002670:	2301      	movs	r3, #1
 8002672:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	4b82      	ldr	r3, [pc, #520]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d118      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002680:	4b7f      	ldr	r3, [pc, #508]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7e      	ldr	r2, [pc, #504]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268c:	f7fe fc7e 	bl	8000f8c <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	e008      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002694:	f7fe fc7a 	bl	8000f8c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0e5      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026b2:	4b72      	ldr	r3, [pc, #456]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ba:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d02e      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d027      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d0:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026da:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	4b68      	ldr	r3, [pc, #416]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026e6:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d014      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fc49 	bl	8000f8c <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fc45 	bl	8000f8c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0ae      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002720:	4b56      	ldr	r3, [pc, #344]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4953      	ldr	r1, [pc, #332]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800272e:	4313      	orrs	r3, r2
 8002730:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002732:	7efb      	ldrb	r3, [r7, #27]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b50      	ldr	r3, [pc, #320]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4a4f      	ldr	r2, [pc, #316]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002750:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4947      	ldr	r1, [pc, #284]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800276e:	4b43      	ldr	r3, [pc, #268]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4940      	ldr	r1, [pc, #256]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800277c:	4313      	orrs	r3, r2
 800277e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800278c:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	4938      	ldr	r1, [pc, #224]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800279a:	4313      	orrs	r3, r2
 800279c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800279e:	4b37      	ldr	r3, [pc, #220]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80027aa:	4b34      	ldr	r3, [pc, #208]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d148      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d138      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e042      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80027ec:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4920      	ldr	r1, [pc, #128]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	491c      	ldr	r1, [pc, #112]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800280c:	4313      	orrs	r3, r2
 800280e:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe fbb9 	bl	8000f8c <HAL_GetTick>
 800281a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800281e:	f7fe fbb5 	bl	8000f8c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	@ 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e020      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800283c:	e009      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800283e:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4904      	ldr	r1, [pc, #16]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	42420440 	.word	0x42420440
 8002888:	42420070 	.word	0x42420070

0800288c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e041      	b.n	8002922 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f96e 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f000 fbae 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e041      	b.n	80029c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f839 	bl	80029c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f000 fb5f 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_TIM_PWM_Start+0x24>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e022      	b.n	8002a46 <HAL_TIM_PWM_Start+0x6a>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d109      	bne.n	8002a1a <HAL_TIM_PWM_Start+0x3e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	e015      	b.n	8002a46 <HAL_TIM_PWM_Start+0x6a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d109      	bne.n	8002a34 <HAL_TIM_PWM_Start+0x58>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e008      	b.n	8002a46 <HAL_TIM_PWM_Start+0x6a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e063      	b.n	8002b16 <HAL_TIM_PWM_Start+0x13a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x82>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a5c:	e013      	b.n	8002a86 <HAL_TIM_PWM_Start+0xaa>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_PWM_Start+0x92>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a6c:	e00b      	b.n	8002a86 <HAL_TIM_PWM_Start+0xaa>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_PWM_Start+0xa2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a7c:	e003      	b.n	8002a86 <HAL_TIM_PWM_Start+0xaa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fe75 	bl	800377e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <HAL_TIM_PWM_Start+0x144>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d107      	bne.n	8002aae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_TIM_PWM_Start+0x144>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x104>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x104>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a17      	ldr	r2, [pc, #92]	@ (8002b24 <HAL_TIM_PWM_Start+0x148>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x104>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	@ (8002b28 <HAL_TIM_PWM_Start+0x14c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x104>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a14      	ldr	r2, [pc, #80]	@ (8002b2c <HAL_TIM_PWM_Start+0x150>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_TIM_PWM_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d010      	beq.n	8002b14 <HAL_TIM_PWM_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	e007      	b.n	8002b14 <HAL_TIM_PWM_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00

08002b30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f839 	bl	8002bce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fa5c 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e088      	b.n	8002d10 <HAL_TIM_IC_ConfigChannel+0x130>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002c1c:	f000 fc06 	bl	800342c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 020c 	bic.w	r2, r2, #12
 8002c2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
 8002c42:	e060      	b.n	8002d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d11c      	bne.n	8002c84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c5a:	f000 fc75 	bl	8003548 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6999      	ldr	r1, [r3, #24]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	619a      	str	r2, [r3, #24]
 8002c82:	e040      	b.n	8002d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11b      	bne.n	8002cc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c9a:	f000 fcc0 	bl	800361e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 020c 	bic.w	r2, r2, #12
 8002cac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69d9      	ldr	r1, [r3, #28]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	e021      	b.n	8002d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d11c      	bne.n	8002d02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002cd8:	f000 fcdc 	bl	8003694 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002cea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69d9      	ldr	r1, [r3, #28]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	021a      	lsls	r2, r3, #8
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	61da      	str	r2, [r3, #28]
 8002d00:	e001      	b.n	8002d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e0ae      	b.n	8002e94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	f200 809f 	bhi.w	8002e84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d46:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08002e85 	.word	0x08002e85
 8002d54:	08002e85 	.word	0x08002e85
 8002d58:	08002e85 	.word	0x08002e85
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002e85 	.word	0x08002e85
 8002d64:	08002e85 	.word	0x08002e85
 8002d68:	08002e85 	.word	0x08002e85
 8002d6c:	08002e03 	.word	0x08002e03
 8002d70:	08002e85 	.word	0x08002e85
 8002d74:	08002e85 	.word	0x08002e85
 8002d78:	08002e85 	.word	0x08002e85
 8002d7c:	08002e43 	.word	0x08002e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f9c8 	bl	800311c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0204 	bic.w	r2, r2, #4
 8002daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	619a      	str	r2, [r3, #24]
      break;
 8002dbe:	e064      	b.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fa0e 	bl	80031e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6999      	ldr	r1, [r3, #24]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	021a      	lsls	r2, r3, #8
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	619a      	str	r2, [r3, #24]
      break;
 8002e00:	e043      	b.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fa57 	bl	80032bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0208 	orr.w	r2, r2, #8
 8002e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0204 	bic.w	r2, r2, #4
 8002e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69d9      	ldr	r1, [r3, #28]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	61da      	str	r2, [r3, #28]
      break;
 8002e40:	e023      	b.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 faa1 	bl	8003390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69d9      	ldr	r1, [r3, #28]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	021a      	lsls	r2, r3, #8
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	61da      	str	r2, [r3, #28]
      break;
 8002e82:	e002      	b.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
      break;
 8002e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e0b4      	b.n	8003022 <HAL_TIM_ConfigClockSource+0x186>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef0:	d03e      	beq.n	8002f70 <HAL_TIM_ConfigClockSource+0xd4>
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef6:	f200 8087 	bhi.w	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efe:	f000 8086 	beq.w	800300e <HAL_TIM_ConfigClockSource+0x172>
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f06:	d87f      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b70      	cmp	r3, #112	@ 0x70
 8002f0a:	d01a      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0xa6>
 8002f0c:	2b70      	cmp	r3, #112	@ 0x70
 8002f0e:	d87b      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b60      	cmp	r3, #96	@ 0x60
 8002f12:	d050      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f14:	2b60      	cmp	r3, #96	@ 0x60
 8002f16:	d877      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b50      	cmp	r3, #80	@ 0x50
 8002f1a:	d03c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0xfa>
 8002f1c:	2b50      	cmp	r3, #80	@ 0x50
 8002f1e:	d873      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	d058      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002f24:	2b40      	cmp	r3, #64	@ 0x40
 8002f26:	d86f      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b30      	cmp	r3, #48	@ 0x30
 8002f2a:	d064      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b30      	cmp	r3, #48	@ 0x30
 8002f2e:	d86b      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d060      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d867      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05c      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d05a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f40:	e062      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f52:	f000 fbf5 	bl	8003740 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	609a      	str	r2, [r3, #8]
      break;
 8002f6e:	e04f      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f80:	f000 fbde 	bl	8003740 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f92:	609a      	str	r2, [r3, #8]
      break;
 8002f94:	e03c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 faa2 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2150      	movs	r1, #80	@ 0x50
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fbac 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e02c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f000 fafc 	bl	80035c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2160      	movs	r1, #96	@ 0x60
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fb9c 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002fd4:	e01c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f000 fa82 	bl	80034ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2140      	movs	r1, #64	@ 0x40
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fb8c 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e00c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f000 fb83 	bl	800370c <TIM_ITRx_SetConfig>
      break;
 8003006:	e003      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e000      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800300e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a33      	ldr	r2, [pc, #204]	@ (800310c <TIM_Base_SetConfig+0xe0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00f      	beq.n	8003064 <TIM_Base_SetConfig+0x38>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x38>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a30      	ldr	r2, [pc, #192]	@ (8003110 <TIM_Base_SetConfig+0xe4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x38>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a2f      	ldr	r2, [pc, #188]	@ (8003114 <TIM_Base_SetConfig+0xe8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x38>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a2e      	ldr	r2, [pc, #184]	@ (8003118 <TIM_Base_SetConfig+0xec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a24      	ldr	r2, [pc, #144]	@ (800310c <TIM_Base_SetConfig+0xe0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00f      	beq.n	800309e <TIM_Base_SetConfig+0x72>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003084:	d00b      	beq.n	800309e <TIM_Base_SetConfig+0x72>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <TIM_Base_SetConfig+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_Base_SetConfig+0x72>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a20      	ldr	r2, [pc, #128]	@ (8003114 <TIM_Base_SetConfig+0xe8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_Base_SetConfig+0x72>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a1f      	ldr	r2, [pc, #124]	@ (8003118 <TIM_Base_SetConfig+0xec>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d108      	bne.n	80030b0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <TIM_Base_SetConfig+0xe0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]
  }
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40000c00 	.word	0x40000c00

0800311c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f023 0201 	bic.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0303 	bic.w	r3, r3, #3
 8003152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f023 0302 	bic.w	r3, r3, #2
 8003164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <TIM_OC1_SetConfig+0xc8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10c      	bne.n	8003192 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0308 	bic.w	r3, r3, #8
 800317e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a13      	ldr	r2, [pc, #76]	@ (80031e4 <TIM_OC1_SetConfig+0xc8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d111      	bne.n	80031be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	621a      	str	r2, [r3, #32]
}
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00

080031e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f023 0210 	bic.w	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0320 	bic.w	r3, r3, #32
 8003232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <TIM_OC2_SetConfig+0xd0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10d      	bne.n	8003264 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800324e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a14      	ldr	r2, [pc, #80]	@ (80032b8 <TIM_OC2_SetConfig+0xd0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d113      	bne.n	8003294 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00

080032bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <TIM_OC3_SetConfig+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d10d      	bne.n	8003336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a14      	ldr	r2, [pc, #80]	@ (800338c <TIM_OC3_SetConfig+0xd0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d113      	bne.n	8003366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00

08003390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	031b      	lsls	r3, r3, #12
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003428 <TIM_OC4_SetConfig+0x98>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d109      	bne.n	8003404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00

0800342c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f023 0201 	bic.w	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <TIM_TI1_SetConfig+0xb0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_TI1_SetConfig+0x4e>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003460:	d00b      	beq.n	800347a <TIM_TI1_SetConfig+0x4e>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a1e      	ldr	r2, [pc, #120]	@ (80034e0 <TIM_TI1_SetConfig+0xb4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_TI1_SetConfig+0x4e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <TIM_TI1_SetConfig+0xb8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_TI1_SetConfig+0x4e>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a1c      	ldr	r2, [pc, #112]	@ (80034e8 <TIM_TI1_SetConfig+0xbc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <TIM_TI1_SetConfig+0x52>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <TIM_TI1_SetConfig+0x54>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e003      	b.n	800349e <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 030a 	bic.w	r3, r3, #10
 80034b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 030a 	and.w	r3, r3, #10
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00

080034ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0201 	bic.w	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 030a 	bic.w	r3, r3, #10
 8003528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f023 0210 	bic.w	r2, r3, #16
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	031b      	lsls	r3, r3, #12
 800358c:	b29b      	uxth	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800359a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f023 0210 	bic.w	r2, r3, #16
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	031b      	lsls	r3, r3, #12
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	b2db      	uxtb	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	b29b      	uxth	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	031b      	lsls	r3, r3, #12
 80036ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003722:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	f043 0307 	orr.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	609a      	str	r2, [r3, #8]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800375a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	431a      	orrs	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800377e:	b480      	push	{r7}
 8003780:	b087      	sub	sp, #28
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	2201      	movs	r2, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	43db      	mvns	r3, r3
 80037a0:	401a      	ands	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	621a      	str	r2, [r3, #32]
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e04b      	b.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382c:	d00e      	beq.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a15      	ldr	r2, [pc, #84]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a13      	ldr	r2, [pc, #76]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10c      	bne.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4313      	orrs	r3, r2
 800385c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00

08003894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e042      	b.n	800392c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fa4a 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	@ 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fc7f 	bl	80041dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800390c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0ba      	sub	sp, #232	@ 0xe8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_UART_IRQHandler+0x66>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fb63 	bl	800405e <UART_Receive_IT>
      return;
 8003998:	e25b      	b.n	8003e52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800399a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80de 	beq.w	8003b60 <HAL_UART_IRQHandler+0x22c>
 80039a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80d1 	beq.w	8003b60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_UART_IRQHandler+0xae>
 80039ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_UART_IRQHandler+0xd2>
 80039ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_UART_IRQHandler+0xf6>
 8003a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f043 0204 	orr.w	r2, r3, #4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <HAL_UART_IRQHandler+0x126>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f043 0208 	orr.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 81f2 	beq.w	8003e48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_UART_IRQHandler+0x14e>
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 faee 	bl	800405e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_UART_IRQHandler+0x17a>
 8003aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04f      	beq.n	8003b4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9f8 	bl	8003ea4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d041      	beq.n	8003b46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3314      	adds	r3, #20
 8003ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3314      	adds	r3, #20
 8003aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003aee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1d9      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d013      	beq.n	8003b3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d14 <HAL_UART_IRQHandler+0x3e0>)
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fd96 	bl	8001654 <HAL_DMA_Abort_IT>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e00e      	b.n	8003b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f99c 	bl	8003e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	e00a      	b.n	8003b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f998 	bl	8003e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	e006      	b.n	8003b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f994 	bl	8003e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b5a:	e175      	b.n	8003e48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	bf00      	nop
    return;
 8003b5e:	e173      	b.n	8003e48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 814f 	bne.w	8003e08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8148 	beq.w	8003e08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8141 	beq.w	8003e08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80b6 	beq.w	8003d18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8145 	beq.w	8003e4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	f080 813e 	bcs.w	8003e4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	f000 8088 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c10:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1d9      	bne.n	8003be4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e3      	bne.n	8003c6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cc4:	f023 0310 	bic.w	r3, r3, #16
 8003cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cd8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e3      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd fc75 	bl	80015de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8bf 	bl	8003e8e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d10:	e09c      	b.n	8003e4c <HAL_UART_IRQHandler+0x518>
 8003d12:	bf00      	nop
 8003d14:	08003f69 	.word	0x08003f69
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 808e 	beq.w	8003e50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8089 	beq.w	8003e50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d62:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e3      	bne.n	8003d3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	623b      	str	r3, [r7, #32]
   return(result);
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e3      	bne.n	8003d76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0310 	bic.w	r3, r3, #16
 8003dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003de0:	61fa      	str	r2, [r7, #28]
 8003de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	617b      	str	r3, [r7, #20]
   return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e3      	bne.n	8003dbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f844 	bl	8003e8e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e06:	e023      	b.n	8003e50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_UART_IRQHandler+0x4f4>
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8b5 	bl	8003f90 <UART_Transmit_IT>
    return;
 8003e26:	e014      	b.n	8003e52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <HAL_UART_IRQHandler+0x51e>
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8f4 	bl	800402e <UART_EndTransmit_IT>
    return;
 8003e46:	e004      	b.n	8003e52 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e48:	bf00      	nop
 8003e4a:	e002      	b.n	8003e52 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e4c:	bf00      	nop
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e50:	bf00      	nop
  }
}
 8003e52:	37e8      	adds	r7, #232	@ 0xe8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b095      	sub	sp, #84	@ 0x54
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ecc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e5      	bne.n	8003ee0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d119      	bne.n	8003f50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f023 0310 	bic.w	r3, r3, #16
 8003f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f3c:	61ba      	str	r2, [r7, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6979      	ldr	r1, [r7, #20]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e5      	bne.n	8003f1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f5e:	bf00      	nop
 8003f60:	3754      	adds	r7, #84	@ 0x54
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff ff7a 	bl	8003e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b21      	cmp	r3, #33	@ 0x21
 8003fa2:	d13e      	bne.n	8004022 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fac:	d114      	bne.n	8003fd8 <UART_Transmit_IT+0x48>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d110      	bne.n	8003fd8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	1c9a      	adds	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]
 8003fd6:	e008      	b.n	8003fea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	1c59      	adds	r1, r3, #1
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6211      	str	r1, [r2, #32]
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800400c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff02 	bl	8003e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08c      	sub	sp, #48	@ 0x30
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b22      	cmp	r3, #34	@ 0x22
 8004070:	f040 80ae 	bne.w	80041d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407c:	d117      	bne.n	80040ae <UART_Receive_IT+0x50>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d113      	bne.n	80040ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409c:	b29a      	uxth	r2, r3
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	1c9a      	adds	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ac:	e026      	b.n	80040fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040c0:	d007      	beq.n	80040d2 <UART_Receive_IT+0x74>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <UART_Receive_IT+0x82>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e008      	b.n	80040f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800410c:	2b00      	cmp	r3, #0
 800410e:	d15d      	bne.n	80041cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0220 	bic.w	r2, r2, #32
 800411e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800412e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	2b01      	cmp	r3, #1
 8004154:	d135      	bne.n	80041c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0310 	bic.w	r3, r3, #16
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417c:	623a      	str	r2, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b10      	cmp	r3, #16
 800419c:	d10a      	bne.n	80041b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fe67 	bl	8003e8e <HAL_UARTEx_RxEventCallback>
 80041c0:	e002      	b.n	80041c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe51 	bl	8003e6a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e002      	b.n	80041d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3730      	adds	r7, #48	@ 0x30
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004216:	f023 030c 	bic.w	r3, r3, #12
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	430b      	orrs	r3, r1
 8004222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2c      	ldr	r2, [pc, #176]	@ (80042f0 <UART_SetConfig+0x114>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7fe f9be 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	e002      	b.n	8004252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7fe f9a6 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8004250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009a      	lsls	r2, r3, #2
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <UART_SetConfig+0x118>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	0119      	lsls	r1, r3, #4
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009a      	lsls	r2, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	fbb2 f2f3 	udiv	r2, r2, r3
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <UART_SetConfig+0x118>)
 800428a:	fba3 0302 	umull	r0, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2064      	movs	r0, #100	@ 0x64
 8004292:	fb00 f303 	mul.w	r3, r0, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	3332      	adds	r3, #50	@ 0x32
 800429c:	4a15      	ldr	r2, [pc, #84]	@ (80042f4 <UART_SetConfig+0x118>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042a8:	4419      	add	r1, r3
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009a      	lsls	r2, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c0:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <UART_SetConfig+0x118>)
 80042c2:	fba3 0302 	umull	r0, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2064      	movs	r0, #100	@ 0x64
 80042ca:	fb00 f303 	mul.w	r3, r0, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	3332      	adds	r3, #50	@ 0x32
 80042d4:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <UART_SetConfig+0x118>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	440a      	add	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40013800 	.word	0x40013800
 80042f4:	51eb851f 	.word	0x51eb851f

080042f8 <memset>:
 80042f8:	4603      	mov	r3, r0
 80042fa:	4402      	add	r2, r0
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d100      	bne.n	8004302 <memset+0xa>
 8004300:	4770      	bx	lr
 8004302:	f803 1b01 	strb.w	r1, [r3], #1
 8004306:	e7f9      	b.n	80042fc <memset+0x4>

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	2600      	movs	r6, #0
 800430c:	4d0c      	ldr	r5, [pc, #48]	@ (8004340 <__libc_init_array+0x38>)
 800430e:	4c0d      	ldr	r4, [pc, #52]	@ (8004344 <__libc_init_array+0x3c>)
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	42a6      	cmp	r6, r4
 8004316:	d109      	bne.n	800432c <__libc_init_array+0x24>
 8004318:	f000 f81a 	bl	8004350 <_init>
 800431c:	2600      	movs	r6, #0
 800431e:	4d0a      	ldr	r5, [pc, #40]	@ (8004348 <__libc_init_array+0x40>)
 8004320:	4c0a      	ldr	r4, [pc, #40]	@ (800434c <__libc_init_array+0x44>)
 8004322:	1b64      	subs	r4, r4, r5
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	42a6      	cmp	r6, r4
 8004328:	d105      	bne.n	8004336 <__libc_init_array+0x2e>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004330:	4798      	blx	r3
 8004332:	3601      	adds	r6, #1
 8004334:	e7ee      	b.n	8004314 <__libc_init_array+0xc>
 8004336:	f855 3b04 	ldr.w	r3, [r5], #4
 800433a:	4798      	blx	r3
 800433c:	3601      	adds	r6, #1
 800433e:	e7f2      	b.n	8004326 <__libc_init_array+0x1e>
 8004340:	080043a8 	.word	0x080043a8
 8004344:	080043a8 	.word	0x080043a8
 8004348:	080043a8 	.word	0x080043a8
 800434c:	080043ac 	.word	0x080043ac

08004350 <_init>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr

0800435c <_fini>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr
