
src.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033fc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080035e0  080035e0  000045e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003618  08003618  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003618  08003618  00004618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003620  08003620  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003620  08003620  00004620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003628  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003634  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003634  0000517c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6a5  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b65  00000000  00000000  000116da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00013240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fa  00000000  00000000  00013ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2c6  00000000  00000000  000148ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5b6  00000000  00000000  00032bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b48a3  00000000  00000000  00041166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5a09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  000f5a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f8fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080035c8 	.word	0x080035c8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080035c8 	.word	0x080035c8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fcac 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f80e 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fa3e 	bl	800099c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000520:	f000 f86a 	bl	80005f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000524:	f000 f8a6 	bl	8000674 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000528:	f000 f922 	bl	8000770 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 f996 	bl	800085c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fa0a 	bl	8000948 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x24>

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000542:	2238      	movs	r2, #56	@ 0x38
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 f812 	bl	8003570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2220      	movs	r2, #32
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f804 	bl	8003570 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800057c:	2300      	movs	r3, #0
 800057e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000580:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000584:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000586:	2300      	movs	r3, #0
 8000588:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800058e:	4618      	mov	r0, r3
 8000590:	f001 f962 	bl	8001858 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059a:	f000 fa63 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fc62 	bl	8001e84 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005c6:	f000 fa4d 	bl	8000a64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ca:	2302      	movs	r3, #2
 80005cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fe84 	bl	80022e4 <HAL_RCCEx_PeriphCLKConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005e2:	f000 fa3f 	bl	8000a64 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005e6:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <SystemClock_Config+0xbc>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	3770      	adds	r7, #112	@ 0x70
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	42420070 	.word	0x42420070

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_ADC1_Init+0x74>)
 800060a:	4a19      	ldr	r2, [pc, #100]	@ (8000670 <MX_ADC1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_ADC1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_ADC1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_ADC1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <MX_ADC1_Init+0x74>)
 8000622:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <MX_ADC1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_ADC1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <MX_ADC1_Init+0x74>)
 8000636:	f000 fc7d 	bl	8000f34 <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 fa10 	bl	8000a64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	2301      	movs	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_ADC1_Init+0x74>)
 8000656:	f000 fd45 	bl	80010e4 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000660:	f000 fa00 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40012400 	.word	0x40012400

08000674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069e:	4b32      	ldr	r3, [pc, #200]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006a0:	4a32      	ldr	r2, [pc, #200]	@ (800076c <MX_TIM1_Init+0xf8>)
 80006a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006a4:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ca:	4827      	ldr	r0, [pc, #156]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006cc:	f001 ff3c 	bl	8002548 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80006d6:	f000 f9c5 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	4619      	mov	r1, r3
 80006e6:	4820      	ldr	r0, [pc, #128]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006e8:	f002 f98c 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80006f2:	f000 f9b7 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80006f6:	481c      	ldr	r0, [pc, #112]	@ (8000768 <MX_TIM1_Init+0xf4>)
 80006f8:	f001 ffcd 	bl	8002696 <HAL_TIM_IC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000702:	f000 f9af 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	4814      	ldr	r0, [pc, #80]	@ (8000768 <MX_TIM1_Init+0xf4>)
 8000716:	f002 fde7 	bl	80032e8 <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000720:	f000 f9a0 	bl	8000a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2204      	movs	r2, #4
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_TIM1_Init+0xf4>)
 800073c:	f002 f803 	bl	8002746 <HAL_TIM_IC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000746:	f000 f98d 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2208      	movs	r2, #8
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_TIM1_Init+0xf4>)
 8000752:	f001 fff8 	bl	8002746 <HAL_TIM_IC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800075c:	f000 f982 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000058 	.word	0x20000058
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	@ 0x38
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c8:	4823      	ldr	r0, [pc, #140]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007ca:	f001 febd 	bl	8002548 <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007d4:	f000 f946 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e2:	4619      	mov	r1, r3
 80007e4:	481c      	ldr	r0, [pc, #112]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007e6:	f002 f90d 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007f0:	f000 f938 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f4:	4818      	ldr	r0, [pc, #96]	@ (8000858 <MX_TIM2_Init+0xe8>)
 80007f6:	f001 fef6 	bl	80025e6 <HAL_TIM_PWM_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000800:	f000 f930 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4619      	mov	r1, r3
 8000812:	4811      	ldr	r0, [pc, #68]	@ (8000858 <MX_TIM2_Init+0xe8>)
 8000814:	f002 fd68 	bl	80032e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800081e:	f000 f921 	bl	8000a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2360      	movs	r3, #96	@ 0x60
 8000824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	@ (8000858 <MX_TIM2_Init+0xe8>)
 800083a:	f002 f821 	bl	8002880 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000844:	f000 f90e 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <MX_TIM2_Init+0xe8>)
 800084a:	f000 f9e5 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3738      	adds	r7, #56	@ 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000a0 	.word	0x200000a0

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	@ 0x38
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <MX_TIM3_Init+0xe4>)
 800088e:	4a2d      	ldr	r2, [pc, #180]	@ (8000944 <MX_TIM3_Init+0xe8>)
 8000890:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_TIM3_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <MX_TIM3_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800089e:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b2:	4823      	ldr	r0, [pc, #140]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008b4:	f001 fe48 	bl	8002548 <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008be:	f000 f8d1 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008d0:	f002 f898 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008da:	f000 f8c3 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008de:	4818      	ldr	r0, [pc, #96]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008e0:	f001 fe81 	bl	80025e6 <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008ea:	f000 f8bb 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4619      	mov	r1, r3
 80008fc:	4810      	ldr	r0, [pc, #64]	@ (8000940 <MX_TIM3_Init+0xe4>)
 80008fe:	f002 fcf3 	bl	80032e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000908:	f000 f8ac 	bl	8000a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	@ 0x60
 800090e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2208      	movs	r2, #8
 8000920:	4619      	mov	r1, r3
 8000922:	4807      	ldr	r0, [pc, #28]	@ (8000940 <MX_TIM3_Init+0xe4>)
 8000924:	f001 ffac 	bl	8002880 <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800092e:	f000 f899 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000932:	4803      	ldr	r0, [pc, #12]	@ (8000940 <MX_TIM3_Init+0xe4>)
 8000934:	f000 f970 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000938:	bf00      	nop
 800093a:	3738      	adds	r7, #56	@ 0x38
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000e8 	.word	0x200000e8
 8000944:	40000400 	.word	0x40000400

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <MX_USART1_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000980:	f002 fd18 	bl	80033b4 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f86b 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000130 	.word	0x20000130
 8000998:	40013800 	.word	0x40013800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0320 	and.w	r3, r3, #32
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_GPIO_Init+0xc0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAGNET_Pin|DIR_Pin|NENABLE_Pin|NSLEEP_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 6164 	mov.w	r1, #3648	@ 0xe40
 8000a16:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <MX_GPIO_Init+0xc4>)
 8000a18:	f000 ff06 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NHOME_Pin LIMIT_SW_Pin NFAULT_Pin */
  GPIO_InitStruct.Pin = NHOME_Pin|LIMIT_SW_Pin|NFAULT_Pin;
 8000a1c:	f44f 5342 	mov.w	r3, #12416	@ 0x3080
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <MX_GPIO_Init+0xc4>)
 8000a32:	f000 fd75 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAGNET_Pin DIR_Pin NENABLE_Pin NSLEEP_Pin */
  GPIO_InitStruct.Pin = MAGNET_Pin|DIR_Pin|NENABLE_Pin|NSLEEP_Pin;
 8000a36:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <MX_GPIO_Init+0xc4>)
 8000a50:	f000 fd66 	bl	8001520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40011000 	.word	0x40011000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <HAL_MspInit+0x5c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_MspInit+0x5c>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	@ (8000acc <HAL_MspInit+0x5c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <HAL_MspInit+0x5c>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_MspInit+0x60>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_MspInit+0x60>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <HAL_ADC_MspInit+0x6c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d121      	bne.n	8000b38 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <HAL_ADC_MspInit+0x70>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b24:	230f      	movs	r3, #15
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_ADC_MspInit+0x74>)
 8000b34:	f000 fcf4 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40012400 	.word	0x40012400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800

08000b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a28      	ldr	r2, [pc, #160]	@ (8000c08 <HAL_TIM_Base_MspInit+0xbc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d125      	bne.n	8000bb8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a26      	ldr	r2, [pc, #152]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000b72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PHOTOCELL_1_Pin|PHOTOCELL_2_Pin;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <HAL_TIM_Base_MspInit+0xc4>)
 8000bb2:	f000 fcb5 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bb6:	e022      	b.n	8000bfe <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc0:	d10c      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
}
 8000bda:	e010      	b.n	8000bfe <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <HAL_TIM_Base_MspInit+0xc8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d10b      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_TIM_Base_MspInit+0xc0>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	@ 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40012c00 	.word	0x40012c00
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40000400 	.word	0x40000400

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c36:	d12b      	bne.n	8000c90 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <HAL_TIM_MspPostInit+0xe0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf8 <HAL_TIM_MspPostInit+0xe0>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <HAL_TIM_MspPostInit+0xe0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PHOTOCELL_38K_Pin;
 8000c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PHOTOCELL_38K_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <HAL_TIM_MspPostInit+0xe4>)
 8000c66:	f000 fc5b 	bl	8001520 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000c6a:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <HAL_TIM_MspPostInit+0xe8>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	623b      	str	r3, [r7, #32]
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	4a1d      	ldr	r2, [pc, #116]	@ (8000d00 <HAL_TIM_MspPostInit+0xe8>)
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c8e:	e02f      	b.n	8000cf0 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1b      	ldr	r2, [pc, #108]	@ (8000d04 <HAL_TIM_MspPostInit+0xec>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12a      	bne.n	8000cf0 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_TIM_MspPostInit+0xe0>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a16      	ldr	r2, [pc, #88]	@ (8000cf8 <HAL_TIM_MspPostInit+0xe0>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_TIM_MspPostInit+0xe0>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_Pin;
 8000cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4810      	ldr	r0, [pc, #64]	@ (8000d08 <HAL_TIM_MspPostInit+0xf0>)
 8000cc8:	f000 fc2a 	bl	8001520 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_TIM_MspPostInit+0xe8>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cdc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <HAL_TIM_MspPostInit+0xe8>)
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	6053      	str	r3, [r2, #4]
}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	@ 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010000 	.word	0x40010000
 8000d04:	40000400 	.word	0x40000400
 8000d08:	40011000 	.word	0x40011000

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a22      	ldr	r2, [pc, #136]	@ (8000db0 <HAL_UART_MspInit+0xa4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d13d      	bne.n	8000da8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a20      	ldr	r2, [pc, #128]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d70:	f000 fbd6 	bl	8001520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d74:	2380      	movs	r3, #128	@ 0x80
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <HAL_UART_MspInit+0xac>)
 8000d88:	f000 fbca 	bl	8001520 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_UART_MspInit+0xb0>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da2:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_UART_MspInit+0xb0>)
 8000da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40013800 	.word	0x40013800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f874 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e24:	f7ff fff8 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2a:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e40:	4c09      	ldr	r4, [pc, #36]	@ (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4e:	f002 fb97 	bl	8003580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff fb5d 	bl	8000510 <main>
  bx lr
 8000e56:	4770      	bx	lr
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e60:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8000e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e68:	2000017c 	.word	0x2000017c

08000e6c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_Init+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_Init+0x28>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 fb19 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fdf0 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fb23 	bl	8001506 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 faf9 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_IncTick+0x1c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a03      	ldr	r2, [pc, #12]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000178 	.word	0x20000178

08000f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	@ (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000178 	.word	0x20000178

08000f34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0be      	b.n	80010d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fdae 	bl	8000ad4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f9ab 	bl	80012d4 <ADC_ConversionStop_Disable>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 8099 	bne.w	80010c2 <HAL_ADC_Init+0x18e>
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8095 	bne.w	80010c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fa0:	f023 0302 	bic.w	r3, r3, #2
 8000fa4:	f043 0202 	orr.w	r2, r3, #2
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7b1b      	ldrb	r3, [r3, #12]
 8000fba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fcc:	d003      	beq.n	8000fd6 <HAL_ADC_Init+0xa2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_ADC_Init+0xa8>
 8000fd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fda:	e000      	b.n	8000fde <HAL_ADC_Init+0xaa>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7d1b      	ldrb	r3, [r3, #20]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d119      	bne.n	8001020 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7b1b      	ldrb	r3, [r3, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d109      	bne.n	8001008 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	035a      	lsls	r2, r3, #13
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	e00b      	b.n	8001020 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100c:	f043 0220 	orr.w	r2, r3, #32
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001018:	f043 0201 	orr.w	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	430a      	orrs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <HAL_ADC_Init+0x1a8>)
 800103c:	4013      	ands	r3, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	430b      	orrs	r3, r1
 8001046:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001050:	d003      	beq.n	800105a <HAL_ADC_Init+0x126>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	3b01      	subs	r3, #1
 8001060:	051b      	lsls	r3, r3, #20
 8001062:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	430a      	orrs	r2, r1
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_ADC_Init+0x1ac>)
 8001080:	4013      	ands	r3, r2
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	d10b      	bne.n	80010a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001092:	f023 0303 	bic.w	r3, r3, #3
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800109e:	e018      	b.n	80010d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	f023 0312 	bic.w	r3, r3, #18
 80010a8:	f043 0210 	orr.w	r2, r3, #16
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010c0:	e007      	b.n	80010d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	ffe1f7fd 	.word	0xffe1f7fd
 80010e0:	ff1f0efe 	.word	0xff1f0efe

080010e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x20>
 8001100:	2302      	movs	r3, #2
 8001102:	e0dc      	b.n	80012be <HAL_ADC_ConfigChannel+0x1da>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b06      	cmp	r3, #6
 8001112:	d81c      	bhi.n	800114e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b05      	subs	r3, #5
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4019      	ands	r1, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b05      	subs	r3, #5
 8001140:	fa00 f203 	lsl.w	r2, r0, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
 800114c:	e03c      	b.n	80011c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d81c      	bhi.n	8001190 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b23      	subs	r3, #35	@ 0x23
 8001168:	221f      	movs	r2, #31
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	4019      	ands	r1, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3b23      	subs	r3, #35	@ 0x23
 8001182:	fa00 f203 	lsl.w	r2, r0, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	631a      	str	r2, [r3, #48]	@ 0x30
 800118e:	e01b      	b.n	80011c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	3b41      	subs	r3, #65	@ 0x41
 80011a2:	221f      	movs	r2, #31
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4019      	ands	r1, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b41      	subs	r3, #65	@ 0x41
 80011bc:	fa00 f203 	lsl.w	r2, r0, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d91c      	bls.n	800120a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68d9      	ldr	r1, [r3, #12]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	3b1e      	subs	r3, #30
 80011e2:	2207      	movs	r2, #7
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4019      	ands	r1, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6898      	ldr	r0, [r3, #8]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	3b1e      	subs	r3, #30
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	e019      	b.n	800123e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6919      	ldr	r1, [r3, #16]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	2207      	movs	r2, #7
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	4019      	ands	r1, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6898      	ldr	r0, [r3, #8]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d003      	beq.n	800124e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800124a:	2b11      	cmp	r3, #17
 800124c:	d132      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1d      	ldr	r2, [pc, #116]	@ (80012c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d125      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d126      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001274:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d11a      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <HAL_ADC_ConfigChannel+0x1e8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	0c9a      	lsrs	r2, r3, #18
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001294:	e002      	b.n	800129c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3b01      	subs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x1b2>
 80012a2:	e007      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a8:	f043 0220 	orr.w	r2, r3, #32
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	40012400 	.word	0x40012400
 80012cc:	20000000 	.word	0x20000000
 80012d0:	431bde83 	.word	0x431bde83

080012d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d12e      	bne.n	800134c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012fe:	f7ff fe0f 	bl	8000f20 <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001304:	e01b      	b.n	800133e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001306:	f7ff fe0b 	bl	8000f20 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d914      	bls.n	800133e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10d      	bne.n	800133e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	f043 0210 	orr.w	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e007      	b.n	800134e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d0dc      	beq.n	8001306 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	@ (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff49 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff5e 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffb0 	bl	8001474 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b08b      	sub	sp, #44	@ 0x2c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e169      	b.n	8001808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001534:	2201      	movs	r2, #1
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8158 	bne.w	8001802 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a9a      	ldr	r2, [pc, #616]	@ (80017c0 <HAL_GPIO_Init+0x2a0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d05e      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800155c:	4a98      	ldr	r2, [pc, #608]	@ (80017c0 <HAL_GPIO_Init+0x2a0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d875      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001562:	4a98      	ldr	r2, [pc, #608]	@ (80017c4 <HAL_GPIO_Init+0x2a4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d058      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001568:	4a96      	ldr	r2, [pc, #600]	@ (80017c4 <HAL_GPIO_Init+0x2a4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d86f      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800156e:	4a96      	ldr	r2, [pc, #600]	@ (80017c8 <HAL_GPIO_Init+0x2a8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d052      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001574:	4a94      	ldr	r2, [pc, #592]	@ (80017c8 <HAL_GPIO_Init+0x2a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d869      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800157a:	4a94      	ldr	r2, [pc, #592]	@ (80017cc <HAL_GPIO_Init+0x2ac>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d04c      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 8001580:	4a92      	ldr	r2, [pc, #584]	@ (80017cc <HAL_GPIO_Init+0x2ac>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d863      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001586:	4a92      	ldr	r2, [pc, #584]	@ (80017d0 <HAL_GPIO_Init+0x2b0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d046      	beq.n	800161a <HAL_GPIO_Init+0xfa>
 800158c:	4a90      	ldr	r2, [pc, #576]	@ (80017d0 <HAL_GPIO_Init+0x2b0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d85d      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d82a      	bhi.n	80015ec <HAL_GPIO_Init+0xcc>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d859      	bhi.n	800164e <HAL_GPIO_Init+0x12e>
 800159a:	a201      	add	r2, pc, #4	@ (adr r2, 80015a0 <HAL_GPIO_Init+0x80>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	0800161b 	.word	0x0800161b
 80015a4:	080015f5 	.word	0x080015f5
 80015a8:	08001607 	.word	0x08001607
 80015ac:	08001649 	.word	0x08001649
 80015b0:	0800164f 	.word	0x0800164f
 80015b4:	0800164f 	.word	0x0800164f
 80015b8:	0800164f 	.word	0x0800164f
 80015bc:	0800164f 	.word	0x0800164f
 80015c0:	0800164f 	.word	0x0800164f
 80015c4:	0800164f 	.word	0x0800164f
 80015c8:	0800164f 	.word	0x0800164f
 80015cc:	0800164f 	.word	0x0800164f
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	0800164f 	.word	0x0800164f
 80015dc:	0800164f 	.word	0x0800164f
 80015e0:	0800164f 	.word	0x0800164f
 80015e4:	080015fd 	.word	0x080015fd
 80015e8:	08001611 	.word	0x08001611
 80015ec:	4a79      	ldr	r2, [pc, #484]	@ (80017d4 <HAL_GPIO_Init+0x2b4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f2:	e02c      	b.n	800164e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e029      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	3304      	adds	r3, #4
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e024      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	3308      	adds	r3, #8
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e01f      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	330c      	adds	r3, #12
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e01a      	b.n	8001650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001622:	2304      	movs	r3, #4
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e013      	b.n	8001650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	611a      	str	r2, [r3, #16]
          break;
 800163a:	e009      	b.n	8001650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	615a      	str	r2, [r3, #20]
          break;
 8001646:	e003      	b.n	8001650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x130>
          break;
 800164e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2bff      	cmp	r3, #255	@ 0xff
 8001654:	d801      	bhi.n	800165a <HAL_GPIO_Init+0x13a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e001      	b.n	800165e <HAL_GPIO_Init+0x13e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	@ 0xff
 8001664:	d802      	bhi.n	800166c <HAL_GPIO_Init+0x14c>
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x152>
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	3b08      	subs	r3, #8
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	210f      	movs	r1, #15
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	6a39      	ldr	r1, [r7, #32]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80b1 	beq.w	8001802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a0:	4b4d      	ldr	r3, [pc, #308]	@ (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	@ (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b4a      	ldr	r3, [pc, #296]	@ (80017d8 <HAL_GPIO_Init+0x2b8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b8:	4a48      	ldr	r2, [pc, #288]	@ (80017dc <HAL_GPIO_Init+0x2bc>)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a40      	ldr	r2, [pc, #256]	@ (80017e0 <HAL_GPIO_Init+0x2c0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_GPIO_Init+0x1ec>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a3f      	ldr	r2, [pc, #252]	@ (80017e4 <HAL_GPIO_Init+0x2c4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1e8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3e      	ldr	r2, [pc, #248]	@ (80017e8 <HAL_GPIO_Init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1e4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3d      	ldr	r2, [pc, #244]	@ (80017ec <HAL_GPIO_Init+0x2cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1e0>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e006      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001700:	2304      	movs	r3, #4
 8001702:	e004      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001704:	2302      	movs	r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_GPIO_Init+0x1ee>
 800170c:	2300      	movs	r3, #0
 800170e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001710:	f002 0203 	and.w	r2, r2, #3
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	4093      	lsls	r3, r2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171e:	492f      	ldr	r1, [pc, #188]	@ (80017dc <HAL_GPIO_Init+0x2bc>)
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	492c      	ldr	r1, [pc, #176]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001746:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4928      	ldr	r1, [pc, #160]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4922      	ldr	r1, [pc, #136]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	491e      	ldr	r1, [pc, #120]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4918      	ldr	r1, [pc, #96]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001796:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	4914      	ldr	r1, [pc, #80]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d021      	beq.n	80017f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	490e      	ldr	r1, [pc, #56]	@ (80017f0 <HAL_GPIO_Init+0x2d0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e021      	b.n	8001802 <HAL_GPIO_Init+0x2e2>
 80017be:	bf00      	nop
 80017c0:	10320000 	.word	0x10320000
 80017c4:	10310000 	.word	0x10310000
 80017c8:	10220000 	.word	0x10220000
 80017cc:	10210000 	.word	0x10210000
 80017d0:	10120000 	.word	0x10120000
 80017d4:	10110000 	.word	0x10110000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40011400 	.word	0x40011400
 80017f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_GPIO_Init+0x304>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	4909      	ldr	r1, [pc, #36]	@ (8001824 <HAL_GPIO_Init+0x304>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	3301      	adds	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	f47f ae8e 	bne.w	8001534 <HAL_GPIO_Init+0x14>
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	372c      	adds	r7, #44	@ 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e304      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b92      	ldr	r3, [pc, #584]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4b8f      	ldr	r3, [pc, #572]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
 8001890:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06c      	beq.n	8001984 <HAL_RCC_OscConfig+0x12c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d168      	bne.n	8001984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e2de      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x76>
 80018c0:	4b80      	ldr	r3, [pc, #512]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b78      	ldr	r3, [pc, #480]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xbc>
 80018fa:	4b72      	ldr	r3, [pc, #456]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a71      	ldr	r2, [pc, #452]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 8001914:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b68      	ldr	r3, [pc, #416]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a67      	ldr	r2, [pc, #412]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff faf4 	bl	8000f20 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff faf0 	bl	8000f20 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e292      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe4>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fae0 	bl	8000f20 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fadc 	bl	8000f20 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e27e      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x10c>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001992:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	4b49      	ldr	r3, [pc, #292]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
 80019aa:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e252      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4939      	ldr	r1, [pc, #228]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fa95 	bl	8000f20 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fa91 	bl	8000f20 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e233      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4927      	ldr	r1, [pc, #156]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fa74 	bl	8000f20 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fa70 	bl	8000f20 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e212      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03a      	beq.n	8001adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fa54 	bl	8000f20 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fa50 	bl	8000f20 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1f2      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fc04 	bl	80022a8 <RCC_Delay>
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fa3a 	bl	8000f20 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fa36 	bl	8000f20 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1d8      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	42420000 	.word	0x42420000
 8001acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e9      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a6 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b94      	ldr	r3, [pc, #592]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b91      	ldr	r3, [pc, #580]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a90      	ldr	r2, [pc, #576]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b8e      	ldr	r3, [pc, #568]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b8b      	ldr	r3, [pc, #556]	@ (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b88      	ldr	r3, [pc, #544]	@ (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a87      	ldr	r2, [pc, #540]	@ (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f9f7 	bl	8000f20 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff f9f3 	bl	8000f20 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	@ 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e195      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b7e      	ldr	r3, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0x4ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b78      	ldr	r3, [pc, #480]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a77      	ldr	r2, [pc, #476]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001b72:	4b73      	ldr	r3, [pc, #460]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a72      	ldr	r2, [pc, #456]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b70      	ldr	r3, [pc, #448]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a6f      	ldr	r2, [pc, #444]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	e01c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x356>
 8001b94:	4b6a      	ldr	r3, [pc, #424]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a69      	ldr	r2, [pc, #420]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a66      	ldr	r2, [pc, #408]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001bae:	4b64      	ldr	r3, [pc, #400]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a63      	ldr	r2, [pc, #396]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b61      	ldr	r3, [pc, #388]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a60      	ldr	r2, [pc, #384]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f9a7 	bl	8000f20 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff f9a3 	bl	8000f20 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e143      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f991 	bl	8000f20 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f98d 	bl	8000f20 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e12d      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	4b49      	ldr	r3, [pc, #292]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b45      	ldr	r3, [pc, #276]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a44      	ldr	r2, [pc, #272]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 808c 	beq.w	8001d58 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c40:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001c5a:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e103      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d14e      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c74:	4b32      	ldr	r3, [pc, #200]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001c80:	4b2f      	ldr	r3, [pc, #188]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0ef      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001c94:	4b2c      	ldr	r3, [pc, #176]	@ (8001d48 <HAL_RCC_OscConfig+0x4f0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f941 	bl	8000f20 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001ca2:	f7ff f93d 	bl	8000f20 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	@ 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0df      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001cb4:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ccc:	491c      	ldr	r1, [pc, #112]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4918      	ldr	r1, [pc, #96]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_RCC_OscConfig+0x4f0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff f919 	bl	8000f20 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001cf2:	f7ff f915 	bl	8000f20 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	@ 0x64
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0b7      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x49a>
 8001d10:	e022      	b.n	8001d58 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <HAL_RCC_OscConfig+0x4e8>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_RCC_OscConfig+0x4f0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff f8fc 	bl	8000f20 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001d2c:	f7ff f8f8 	bl	8000f20 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e09a      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40007000 	.word	0x40007000
 8001d48:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8088 	beq.w	8001e72 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d62:	4b46      	ldr	r3, [pc, #280]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d068      	beq.n	8001e40 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d14d      	bne.n	8001e12 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <HAL_RCC_OscConfig+0x628>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f8d0 	bl	8000f20 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f8cc 	bl	8000f20 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e06e      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001daa:	d10f      	bne.n	8001dcc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001dac:	4b33      	ldr	r3, [pc, #204]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4931      	ldr	r1, [pc, #196]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	492d      	ldr	r1, [pc, #180]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_RCC_OscConfig+0x628>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f899 	bl	8000f20 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f895 	bl	8000f20 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x59a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x628>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff f882 	bl	8000f20 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f87e 	bl	8000f20 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c8>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_RCC_OscConfig+0x624>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42420060 	.word	0x42420060

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe ffd4 	bl	8000f20 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe ffd0 	bl	8000f20 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	@ (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ff32 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	080035e0 	.word	0x080035e0
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800205c:	b092      	sub	sp, #72	@ 0x48
 800205e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002064:	2300      	movs	r3, #0
 8002066:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002068:	2300      	movs	r3, #0
 800206a:	647b      	str	r3, [r7, #68]	@ 0x44
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207c:	4b6b      	ldr	r3, [pc, #428]	@ (800222c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b04      	cmp	r3, #4
 800208a:	d002      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x3a>
 800208c:	2b08      	cmp	r3, #8
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x40>
 8002090:	e0c3      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002092:	4b67      	ldr	r3, [pc, #412]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002094:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002096:	e0c3      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80020a2:	5c9b      	ldrb	r3, [r3, r2]
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80ac 	beq.w	800220a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80020b2:	4b5e      	ldr	r3, [pc, #376]	@ (800222c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	f003 020f 	and.w	r2, r3, #15
 80020ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x1e0>)
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80020c0:	4b5a      	ldr	r3, [pc, #360]	@ (800222c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 808c 	beq.w	80021e6 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020ce:	4b57      	ldr	r3, [pc, #348]	@ (800222c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	3301      	adds	r3, #1
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80020dc:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3302      	adds	r3, #2
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80020ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ec:	2200      	movs	r2, #0
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80020f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f4:	2200      	movs	r2, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	4611      	mov	r1, r2
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	fb00 f203 	mul.w	r2, r0, r3
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	fb03 f301 	mul.w	r3, r3, r1
 8002106:	4413      	add	r3, r2
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	fba2 4500 	umull	r4, r5, r2, r0
 800210e:	442b      	add	r3, r5
 8002110:	461d      	mov	r5, r3
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	f04f 0000 	mov.w	r0, #0
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002124:	0150      	lsls	r0, r2, #5
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	ebb2 0a04 	subs.w	sl, r2, r4
 800212e:	eb63 0b05 	sbc.w	fp, r3, r5
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800213e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002142:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002146:	ebb2 080a 	subs.w	r8, r2, sl
 800214a:	eb63 090b 	sbc.w	r9, r3, fp
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800215e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002162:	4690      	mov	r8, r2
 8002164:	4699      	mov	r9, r3
 8002166:	eb18 0304 	adds.w	r3, r8, r4
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	eb49 0305 	adc.w	r3, r9, r5
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217e:	4629      	mov	r1, r5
 8002180:	028b      	lsls	r3, r1, #10
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	4604      	mov	r4, r0
 8002188:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800218c:	4601      	mov	r1, r0
 800218e:	028a      	lsls	r2, r1, #10
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002196:	2200      	movs	r2, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	617a      	str	r2, [r7, #20]
 800219c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800219e:	2200      	movs	r2, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80021a8:	4622      	mov	r2, r4
 80021aa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80021ae:	4645      	mov	r5, r8
 80021b0:	fb05 f202 	mul.w	r2, r5, r2
 80021b4:	46cc      	mov	ip, r9
 80021b6:	4625      	mov	r5, r4
 80021b8:	461c      	mov	r4, r3
 80021ba:	4623      	mov	r3, r4
 80021bc:	fb03 f30c 	mul.w	r3, r3, ip
 80021c0:	4413      	add	r3, r2
 80021c2:	4622      	mov	r2, r4
 80021c4:	4644      	mov	r4, r8
 80021c6:	fba2 2404 	umull	r2, r4, r2, r4
 80021ca:	61fc      	str	r4, [r7, #28]
 80021cc:	61ba      	str	r2, [r7, #24]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d8:	f7fe f824 	bl	8000224 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4613      	mov	r3, r2
 80021e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e4:	e007      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80021e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e8:	4a11      	ldr	r2, [pc, #68]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80021f8:	7b5b      	ldrb	r3, [r3, #13]
 80021fa:	461a      	mov	r2, r3
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8002202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	647b      	str	r3, [r7, #68]	@ 0x44
 8002208:	e004      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800220a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220c:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <HAL_RCC_GetSysClockFreq+0x1e4>)
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8002214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002218:	e002      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800221c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800221e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002222:	4618      	mov	r0, r3
 8002224:	3748      	adds	r7, #72	@ 0x48
 8002226:	46bd      	mov	sp, r7
 8002228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	00f42400 	.word	0x00f42400
 8002234:	080035f8 	.word	0x080035f8
 8002238:	08003608 	.word	0x08003608
 800223c:	003d0900 	.word	0x003d0900
 8002240:	007a1200 	.word	0x007a1200

08002244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b02      	ldr	r3, [pc, #8]	@ (8002254 <HAL_RCC_GetHCLKFreq+0x10>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff2 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	@ (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	080035f0 	.word	0x080035f0

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002284:	f7ff ffde 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0adb      	lsrs	r3, r3, #11
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	@ (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080035f0 	.word	0x080035f0

080022a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b0:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <RCC_Delay+0x34>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <RCC_Delay+0x38>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a5b      	lsrs	r3, r3, #9
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c4:	bf00      	nop
  }
  while (Delay --);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	60fa      	str	r2, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <RCC_Delay+0x1c>
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000000 	.word	0x20000000
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d07d      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002308:	4b8b      	ldr	r3, [pc, #556]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b88      	ldr	r3, [pc, #544]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a87      	ldr	r2, [pc, #540]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231e:	61d3      	str	r3, [r2, #28]
 8002320:	4b85      	ldr	r3, [pc, #532]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d118      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233c:	4b7f      	ldr	r3, [pc, #508]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7e      	ldr	r2, [pc, #504]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002348:	f7fe fdea 	bl	8000f20 <HAL_GetTick>
 800234c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	e008      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7fe fde6 	bl	8000f20 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0e5      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b76      	ldr	r3, [pc, #472]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236e:	4b72      	ldr	r3, [pc, #456]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002376:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d02e      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d027      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238c:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002394:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239c:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023a2:	4a65      	ldr	r2, [pc, #404]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d014      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fdb5 	bl	8000f20 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fdb1 	bl	8000f20 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0ae      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023dc:	4b56      	ldr	r3, [pc, #344]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4953      	ldr	r1, [pc, #332]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ee:	7efb      	ldrb	r3, [r7, #27]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240c:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4947      	ldr	r1, [pc, #284]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800242a:	4b43      	ldr	r3, [pc, #268]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4940      	ldr	r1, [pc, #256]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002438:	4313      	orrs	r3, r2
 800243a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002448:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	4938      	ldr	r1, [pc, #224]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002456:	4313      	orrs	r3, r2
 8002458:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800245a:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d148      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800247c:	4b2e      	ldr	r3, [pc, #184]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d138      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002494:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e042      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80024a8:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4920      	ldr	r1, [pc, #128]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	491c      	ldr	r1, [pc, #112]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80024cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fd25 	bl	8000f20 <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024da:	f7fe fd21 	bl	8000f20 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	@ 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e020      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80024f8:	e009      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4904      	ldr	r1, [pc, #16]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	40007000 	.word	0x40007000
 8002540:	42420440 	.word	0x42420440
 8002544:	42420070 	.word	0x42420070

08002548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e041      	b.n	80025de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe faec 	bl	8000b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 fb04 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e041      	b.n	800267c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f839 	bl	8002684 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f000 fab5 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e041      	b.n	800272c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f839 	bl	8002734 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 fa5d 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002760:	2302      	movs	r3, #2
 8002762:	e088      	b.n	8002876 <HAL_TIM_IC_ConfigChannel+0x130>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11b      	bne.n	80027aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002782:	f000 fc07 	bl	8002f94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 020c 	bic.w	r2, r2, #12
 8002794:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6999      	ldr	r1, [r3, #24]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	619a      	str	r2, [r3, #24]
 80027a8:	e060      	b.n	800286c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11c      	bne.n	80027ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80027c0:	f000 fc76 	bl	80030b0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80027d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6999      	ldr	r1, [r3, #24]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	619a      	str	r2, [r3, #24]
 80027e8:	e040      	b.n	800286c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d11b      	bne.n	8002828 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002800:	f000 fcc1 	bl	8003186 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 020c 	bic.w	r2, r2, #12
 8002812:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69d9      	ldr	r1, [r3, #28]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	61da      	str	r2, [r3, #28]
 8002826:	e021      	b.n	800286c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d11c      	bne.n	8002868 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800283e:	f000 fcdd 	bl	80031fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002850:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	61da      	str	r2, [r3, #28]
 8002866:	e001      	b.n	800286c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002874:	7dfb      	ldrb	r3, [r7, #23]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800289a:	2302      	movs	r3, #2
 800289c:	e0ae      	b.n	80029fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	f200 809f 	bhi.w	80029ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028ae:	a201      	add	r2, pc, #4	@ (adr r2, 80028b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080029ed 	.word	0x080029ed
 80028bc:	080029ed 	.word	0x080029ed
 80028c0:	080029ed 	.word	0x080029ed
 80028c4:	08002929 	.word	0x08002929
 80028c8:	080029ed 	.word	0x080029ed
 80028cc:	080029ed 	.word	0x080029ed
 80028d0:	080029ed 	.word	0x080029ed
 80028d4:	0800296b 	.word	0x0800296b
 80028d8:	080029ed 	.word	0x080029ed
 80028dc:	080029ed 	.word	0x080029ed
 80028e0:	080029ed 	.word	0x080029ed
 80028e4:	080029ab 	.word	0x080029ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f9c8 	bl	8002c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0208 	orr.w	r2, r2, #8
 8002902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	619a      	str	r2, [r3, #24]
      break;
 8002926:	e064      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa0e 	bl	8002d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	619a      	str	r2, [r3, #24]
      break;
 8002968:	e043      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fa57 	bl	8002e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0208 	orr.w	r2, r2, #8
 8002984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0204 	bic.w	r2, r2, #4
 8002994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	61da      	str	r2, [r3, #28]
      break;
 80029a8:	e023      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 faa1 	bl	8002ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69d9      	ldr	r1, [r3, #28]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	61da      	str	r2, [r3, #28]
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
      break;
 80029f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_ConfigClockSource+0x1c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0b4      	b.n	8002b8a <HAL_TIM_ConfigClockSource+0x186>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a58:	d03e      	beq.n	8002ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5e:	f200 8087 	bhi.w	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a66:	f000 8086 	beq.w	8002b76 <HAL_TIM_ConfigClockSource+0x172>
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6e:	d87f      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b70      	cmp	r3, #112	@ 0x70
 8002a72:	d01a      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0xa6>
 8002a74:	2b70      	cmp	r3, #112	@ 0x70
 8002a76:	d87b      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b60      	cmp	r3, #96	@ 0x60
 8002a7a:	d050      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x11a>
 8002a7c:	2b60      	cmp	r3, #96	@ 0x60
 8002a7e:	d877      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a80:	2b50      	cmp	r3, #80	@ 0x50
 8002a82:	d03c      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0xfa>
 8002a84:	2b50      	cmp	r3, #80	@ 0x50
 8002a86:	d873      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b40      	cmp	r3, #64	@ 0x40
 8002a8a:	d058      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x13a>
 8002a8c:	2b40      	cmp	r3, #64	@ 0x40
 8002a8e:	d86f      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b30      	cmp	r3, #48	@ 0x30
 8002a92:	d064      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002a94:	2b30      	cmp	r3, #48	@ 0x30
 8002a96:	d86b      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d060      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d867      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d05c      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d05a      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	e062      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aba:	f000 fbf5 	bl	80032a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	609a      	str	r2, [r3, #8]
      break;
 8002ad6:	e04f      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ae8:	f000 fbde 	bl	80032a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002afa:	609a      	str	r2, [r3, #8]
      break;
 8002afc:	e03c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 faa2 	bl	8003054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2150      	movs	r1, #80	@ 0x50
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fbac 	bl	8003274 <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e02c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 fafc 	bl	8003128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2160      	movs	r1, #96	@ 0x60
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fb9c 	bl	8003274 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e01c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 fa82 	bl	8003054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2140      	movs	r1, #64	@ 0x40
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb8c 	bl	8003274 <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e00c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f000 fb83 	bl	8003274 <TIM_ITRx_SetConfig>
      break;
 8002b6e:	e003      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e000      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a33      	ldr	r2, [pc, #204]	@ (8002c74 <TIM_Base_SetConfig+0xe0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a30      	ldr	r2, [pc, #192]	@ (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8002c7c <TIM_Base_SetConfig+0xe8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c80 <TIM_Base_SetConfig+0xec>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a24      	ldr	r2, [pc, #144]	@ (8002c74 <TIM_Base_SetConfig+0xe0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_Base_SetConfig+0x72>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bec:	d00b      	beq.n	8002c06 <TIM_Base_SetConfig+0x72>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0x72>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <TIM_Base_SetConfig+0xe8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0x72>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1f      	ldr	r2, [pc, #124]	@ (8002c80 <TIM_Base_SetConfig+0xec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <TIM_Base_SetConfig+0xe0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d103      	bne.n	8002c4c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f023 0201 	bic.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	611a      	str	r2, [r3, #16]
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00

08002c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f023 0201 	bic.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 0302 	bic.w	r3, r3, #2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <TIM_OC1_SetConfig+0xc8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10c      	bne.n	8002cfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0308 	bic.w	r3, r3, #8
 8002ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	@ (8002d4c <TIM_OC1_SetConfig+0xc8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	621a      	str	r2, [r3, #32]
}
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40012c00 	.word	0x40012c00

08002d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 0210 	bic.w	r2, r3, #16
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0320 	bic.w	r3, r3, #32
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <TIM_OC2_SetConfig+0xd0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10d      	bne.n	8002dcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a14      	ldr	r2, [pc, #80]	@ (8002e20 <TIM_OC2_SetConfig+0xd0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d113      	bne.n	8002dfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00

08002e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <TIM_OC3_SetConfig+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10d      	bne.n	8002e9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a14      	ldr	r2, [pc, #80]	@ (8002ef4 <TIM_OC3_SetConfig+0xd0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d113      	bne.n	8002ece <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	621a      	str	r2, [r3, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00

08002ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	031b      	lsls	r3, r3, #12
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0f      	ldr	r2, [pc, #60]	@ (8002f90 <TIM_OC4_SetConfig+0x98>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d109      	bne.n	8002f6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00

08002f94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 0201 	bic.w	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a21      	ldr	r2, [pc, #132]	@ (8003044 <TIM_TI1_SetConfig+0xb0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00f      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x4e>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x4e>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003048 <TIM_TI1_SetConfig+0xb4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x4e>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <TIM_TI1_SetConfig+0xb8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x4e>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <TIM_TI1_SetConfig+0xbc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <TIM_TI1_SetConfig+0x52>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <TIM_TI1_SetConfig+0x54>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e003      	b.n	8003006 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800300c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	b2db      	uxtb	r3, r3
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 030a 	and.w	r3, r3, #10
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00

08003054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 030a 	bic.w	r3, r3, #10
 8003090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 0210 	bic.w	r2, r3, #16
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	031b      	lsls	r3, r3, #12
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003102:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f023 0210 	bic.w	r2, r3, #16
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	031b      	lsls	r3, r3, #12
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003164:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	621a      	str	r2, [r3, #32]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 0303 	bic.w	r3, r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003228:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	031b      	lsls	r3, r3, #12
 8003240:	b29b      	uxth	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800324e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	031b      	lsls	r3, r3, #12
 8003254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	f043 0307 	orr.w	r3, r3, #7
 8003296:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	609a      	str	r2, [r3, #8]
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e04b      	b.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334c:	d00e      	beq.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10c      	bne.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00

080033b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e042      	b.n	800344c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fc96 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	@ 0x24
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f82b 	bl	8003454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800340c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800341c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800342c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800348e:	f023 030c 	bic.w	r3, r3, #12
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	430b      	orrs	r3, r1
 800349a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003568 <UART_SetConfig+0x114>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d103      	bne.n	80034c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe fee0 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	e002      	b.n	80034ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fec8 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80034c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	4a22      	ldr	r2, [pc, #136]	@ (800356c <UART_SetConfig+0x118>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	0119      	lsls	r1, r3, #4
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003500:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <UART_SetConfig+0x118>)
 8003502:	fba3 0302 	umull	r0, r3, r3, r2
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2064      	movs	r0, #100	@ 0x64
 800350a:	fb00 f303 	mul.w	r3, r0, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	3332      	adds	r3, #50	@ 0x32
 8003514:	4a15      	ldr	r2, [pc, #84]	@ (800356c <UART_SetConfig+0x118>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003520:	4419      	add	r1, r3
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fbb2 f2f3 	udiv	r2, r2, r3
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <UART_SetConfig+0x118>)
 800353a:	fba3 0302 	umull	r0, r3, r3, r2
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2064      	movs	r0, #100	@ 0x64
 8003542:	fb00 f303 	mul.w	r3, r0, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	3332      	adds	r3, #50	@ 0x32
 800354c:	4a07      	ldr	r2, [pc, #28]	@ (800356c <UART_SetConfig+0x118>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	440a      	add	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40013800 	.word	0x40013800
 800356c:	51eb851f 	.word	0x51eb851f

08003570 <memset>:
 8003570:	4603      	mov	r3, r0
 8003572:	4402      	add	r2, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	2600      	movs	r6, #0
 8003584:	4d0c      	ldr	r5, [pc, #48]	@ (80035b8 <__libc_init_array+0x38>)
 8003586:	4c0d      	ldr	r4, [pc, #52]	@ (80035bc <__libc_init_array+0x3c>)
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	f000 f81a 	bl	80035c8 <_init>
 8003594:	2600      	movs	r6, #0
 8003596:	4d0a      	ldr	r5, [pc, #40]	@ (80035c0 <__libc_init_array+0x40>)
 8003598:	4c0a      	ldr	r4, [pc, #40]	@ (80035c4 <__libc_init_array+0x44>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	08003620 	.word	0x08003620
 80035bc:	08003620 	.word	0x08003620
 80035c0:	08003620 	.word	0x08003620
 80035c4:	08003624 	.word	0x08003624

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
